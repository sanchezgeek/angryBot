imports:
    - { resource: parameters.yaml }
    - { resource: ../src/modules/Settings/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Service/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Trading/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Stop/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Buy/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Liquidation/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Profiling/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Screener/Infrastructure/Symfony/config/services.yaml }
    - { resource: ../src/modules/Admin/Infrastructure/Symfony/config/services.yaml }

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $accountUids: '%account_uids%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/modules/'
            - '../src/Kernel.php'
    App\Bot\:
        resource: '../src/modules/Bot'
    App\Alarm\:
        resource: '../src/modules/Alarm'
    App\Output\:
        resource: '../src/modules/Output'
    App\Connection\:
        resource: '../src/modules/Connection'

### schedule
    App\Messenger\SchedulerTransport\TransportFactory:
        tags: [ 'messenger.transport_factory' ]

    App\Messenger\SchedulerTransport\SchedulerFactory: ~

    App\Messenger\SchedulerTransport\Scheduler:
        factory: [ '@App\Messenger\SchedulerTransport\SchedulerFactory', 'createScheduler' ]

### exchange services
    App\Bot\Application\Service\Exchange\PositionServiceInterface:
        alias: App\Infrastructure\ByBit\Service\CacheDecorated\ByBitLinearPositionCacheDecoratedService

    App\Bot\Application\Service\Exchange\ExchangeServiceInterface:
        alias: App\Infrastructure\ByBit\Service\CacheDecorated\ByBitLinearExchangeCacheDecoratedService

    App\Infrastructure\ByBit\Service\CacheDecorated\ByBitLinearExchangeCacheDecoratedService:
        class: App\Infrastructure\ByBit\Service\CacheDecorated\ByBitLinearExchangeCacheDecoratedService
        arguments:
            $exchangeService: '@App\Infrastructure\ByBit\Service\ByBitLinearExchangeService'
            $externalCache: '@tickers.cache'

    App\Infrastructure\ByBit\Service\CacheDecorated\ByBitLinearPositionCacheDecoratedService:
        class: App\Infrastructure\ByBit\Service\CacheDecorated\ByBitLinearPositionCacheDecoratedService
        arguments:
            $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService'

### cache
    App\Infrastructure\Cache\TickersCache:
        alias: App\Infrastructure\ByBit\Service\CacheDecorated\ByBitLinearExchangeCacheDecoratedService

    App\Infrastructure\Symfony\Cache\SharedFilesystemCacheFactory: ~
    tickers.cache:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter
        factory: [ '@App\Infrastructure\Symfony\Cache\SharedFilesystemCacheFactory', 'create' ]
        arguments:
            $namespace: 'tickers'
            $path: '%shared_cache.path%'

#    Symfony\Contracts\Cache\CacheInterface:
#        class: Symfony\Component\Cache\Adapter\ApcuAdapter

    app.cache_shared_filesystem_adapter:
        parent: 'cache.adapter.filesystem'
        tags:
            - { name: 'cache.pool', namespace: 'shared' }

#    app.cache_shared_apcu_adapter:
#        parent: 'cache.adapter.apcu'
#        tags:
#            - { name: 'cache.pool', namespace: 'shared' }

### events
    App\Bot\Application\Events\LogLoggableEventListener:
        tags:
            - { name: 'kernel.event_subscriber', priority: -100}

    App\Infrastructure\DomainEvents\TriggerDomainEventsListener:
        tags:
            - { name: doctrine.event_listener, event: postFlush, method: postFlush }

    App\Infrastructure\ByBit\API\V5\ByBitV5ApiClient:
        class: App\Infrastructure\ByBit\API\V5\ByBitV5ApiClient
        arguments:
            $host: 'https://%env(BYBIT_API_HOST)%'
            $apiKey: '%env(default:env_bybit_api_key:BYBIT_API_KEY_OVERRIDE)%'
            $secretKey: '%env(default:env_bybit_api_secret:BYBIT_API_SECRET_OVERRIDE)%'

    App\Application\Messenger\Position\CheckPositionIsUnderLiquidation\CheckPositionIsUnderLiquidationHandler:
        arguments:
            $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService' # without cache

### commands
    App\Command\Position\AllOpenedPositionsInfoCommand:
        class: App\Command\Position\AllOpenedPositionsInfoCommand
        arguments:
            $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService' # without cache

    App\Command\Liquidation\MakeLiquidationWishedDistanceCommand:
        arguments:
            $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService' # without cache

### consumers
    # for now "...ByBitLinearPositionService' # without cache" commented because CoverLossesAfterCloseByMarketConsumerDto published after ByBitOrderService::closeByMarket (and => after positions cache was already cleared after close)
    #        App\Application\Messenger\Trading\CoverLossesAfterCloseByMarket\CoverLossesAfterCloseByMarketConsumer:
    #            class: App\Application\Messenger\Trading\CoverLossesAfterCloseByMarket\CoverLossesAfterCloseByMarketConsumer
    #            arguments:
    #                $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService' # without cache

### messenger
    App\Infrastructure\Symfony\EventListener\Messenger\WorkerMessageReceivedEvent\CheckShouldMessageRunHandlerListener:
        arguments:
            $handlersLocator: '@messenger.bus.default.messenger.handlers_locator'

### handlers
    App\Application\Messenger\Position\CheckMainPositionIsInLoss\CheckPositionIsInLossHandler:
        arguments:
            $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService' # without cache

    App\Application\Messenger\Position\CheckPositionIsInProfit\CheckPositionIsInProfitHandler:
        arguments:
            $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService' # without cache

    App\Bot\Application\Messenger\Job\BuyOrder\CheckOrdersNowIsActiveHandler:
        arguments:
            $positionService: '@App\Infrastructure\ByBit\Service\ByBitLinearPositionService' # without cache

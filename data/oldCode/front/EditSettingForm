<script setup lang="ts">
import { PropType, computed, ref, watch } from 'vue'
import { useForm } from 'vuestic-ui'
import { Setting } from '../types'
// @todo | symbols/sides
import { validators } from '../../../services/utils'

const props = defineProps({
  setting: {
    type: Object as PropType<Setting | null>,
    default: null,
  },
  saveButtonLabel: {
    type: String,
    default: 'Save',
  },
})

const defaultNewSetting: Omit<Setting, 'id'> = {
  key: '',
  // @todo | symbols/sides
  // role: 'user',
  value: '',
  active: true,
}

const newSetting = ref<Setting>({ ...defaultNewSetting } as Setting)

const isFormHasUnsavedChanges = computed(() => {
  return Object.keys(newSetting.value).some((key) => {
    if (key === 'avatar' || key === 'projects') {
      return false
    }

    return newSetting.value[key as keyof Setting] !== (props.setting ?? defaultNewSetting)?.[key as keyof Setting]
  })
})

defineExpose({
  isFormHasUnsavedChanges,
})

// @todo | symbols/sides
// const { projects } = useProjects({ pagination: ref({ page: 1, perPage: 9999, total: 10 }) })

watch(
  [() => props.setting],
  () => {
    if (!props.setting) {
      return
    }

    newSetting.value = {
      ...props.setting,
    }
  },
  { immediate: true },
)

const form = useForm('add-user-form')

const emit = defineEmits(['close', 'save'])

const onSave = () => {
  if (form.validate()) {
    emit('save', newSetting.value)
  }
}

// @todo | symbols/sides
const roleSelectOptions: { text: Capitalize<Lowercase<UserRole>>; value: UserRole }[] = [
  { text: 'Admin', value: 'admin' },
  { text: 'User', value: 'user' },
  { text: 'Owner', value: 'owner' },
]
</script>

<template>
  <VaForm v-slot="{ isValid }" ref="add-user-form" class="flex-col justify-start items-start gap-4 inline-flex w-full">
    <div class="self-stretch flex-col justify-start items-start gap-4 flex">
      <div class="flex gap-4 flex-col sm:flex-row w-full">
        <VaInput
          v-model="newSetting.fullname"
          label="Full name"
          class="w-full sm:w-1/2"
          :rules="[validators.required]"
          name="fullName"
        />
        <VaInput
          v-model="newSetting.username"
          label="Username"
          class="w-full sm:w-1/2"
          :rules="[validators.required]"
          name="username"
        />
      </div>
      <div class="flex gap-4 flex-col sm:flex-row w-full">
        <VaInput
          v-model="newSetting.email"
          label="Email"
          class="w-full sm:w-1/2"
          :rules="[validators.required, validators.email]"
          name="email"
        />
        <VaSelect
          v-model="newSetting.projects"
          label="Projects"
          class="w-full sm:w-1/2"
          :options="projects"
          value-by="id"
          text-by="project_name"
          :rules="[validators.required]"
          name="projects"
          multiple
          :max-visible-options="2"
        />
      </div>

      <div class="flex gap-4 w-full">
        <div class="w-1/2">
          <VaSelect
            v-model="newSetting.role"
            label="Role"
            class="w-full"
            :options="roleSelectOptions"
            :rules="[validators.required]"
            name="role"
            value-by="value"
          />
        </div>

        <div class="flex items-center w-1/2 mt-4">
          <VaCheckbox v-model="newSetting.active" label="Active" class="w-full" name="active" />
        </div>
      </div>

      <VaTextarea v-model="newSetting.notes" label="Notes" class="w-full" name="notes" />
      <div class="flex gap-2 flex-col-reverse items-stretch justify-end w-full sm:flex-row sm:items-center">
        <VaButton preset="secondary" color="secondary" @click="$emit('close')">Cancel</VaButton>
        <VaButton :disabled="!isValid" @click="onSave">{{ saveButtonLabel }}</VaButton>
      </div>
    </div>
  </VaForm>
</template>

–∞ –∫–∞–∫–∏–µ –±—ã —Ç—ã –µ—â—ë –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ–±–∞–≤–∏–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è SmartMoney?
—Å–µ–π—á–∞—Å —É –º–µ–Ω—è –µ—Å—Ç—å (–≤—Ö–æ–∂—É –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ —à–æ—Ä—Ç—ã)
1) significantPriceChange (—Ü–µ–Ω–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 4 –¥–Ω–µ–≤–Ω—ã—Ö ATR[period = 7])
2) –∏ –≤—Å—ë =)
—Ç–æ –µ—Å—Ç—å –≤—Ö–æ–∂—É –Ω–∞ —Å–∏–ª—å–Ω—ã—Ö –∑–∞–∫–æ–ª–∞—Ö –±–µ–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π

–Ω—É–∂–Ω—ã –ø—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–∞: –ø–æ—Å–ª–µ –∑–∞–∫–æ–ª–∞ –∏ –æ—Ç—Å–∫–æ–∫–∞ —Ü–µ–Ω–∞ —Å–¥–µ–ª–∞–ª–∞ –ø–µ—Ä–µ—Ö–∞–π IDM –∏ —Ç.–¥.
–•–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è Smart Money, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —à–æ—Ä—Ç–æ–≤. –°–µ–π—á–∞—Å —É –Ω–µ–≥–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (4 ATR). –ù—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏ —Å–∏–ª—É –¥–≤–∏–∂–µ–Ω–∏—è –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ Smart Money, —Ç–∞–∫ —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ä–∞–∂–∞—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –í–∞–∂–Ω–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–æ –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–∞–∂–¥–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–ª, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ñ–∞–∫—Ç–æ—Ä –≤–∞–∂–µ–Ω.

–ò–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–Ω–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã (—É–ø–æ–º–∏–Ω–∞–µ—Ç IDM, –ø–µ—Ä–µ—Ö–∞–π), —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏. –ù–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω—É–∂–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å –∏–∑–ª–∏—à–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–º–∏.

–ù—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—ä–µ–º–æ–º, —Ü–µ–Ω–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏, —Å–≤–µ—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏. –í–∞–∂–Ω–æ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ñ–ª—é—ç–Ω—Å–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.

–¢–∞–∫–∂–µ —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å –æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –±–µ–∑ proper —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –º–æ–∂–µ—Ç –Ω–µ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ù–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö, –∫–∞–∫ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

–ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç –ø—Ä—è–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Smart Money –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö, —Ç–∞–∫ —á—Ç–æ –±—É–¥—É –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ. –ù—É–∂–Ω–æ –¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, actionable –∫—Ä–∏—Ç–µ—Ä–∏–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã.

–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í–∞—à —Ç–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π (—Å–∏–ª—å–Ω—ã–π –æ—Ç—Å–∫–æ–∫ –Ω–∞ 4 ATR) ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ, –Ω–æ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π –∏ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω —à—É–º—É. –ö–æ–Ω—Ü–µ–ø—Ü–∏—è Smart Money (–£–º–Ω—ã—Ö –¥–µ–Ω–µ–≥) –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" –∫ –∫—Ä—É–ø–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º, –∞ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –Ω–∏—Ö.

–í–æ—Ç –∫–æ–º–ø–ª–µ–∫—Å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Smart Money, –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Short-—Å–µ—Çups. –ò—Ö —Å–∏–ª–∞ ‚Äî –≤ –∫–æ–Ω—Ñ–ª—é—ç–Ω—Å–µ, —Ç–æ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

üìâ 1. –ö—Ä–∏—Ç–µ—Ä–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ Volume / Volume Profile (–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞)
–≠—Ç–æ –æ–¥–∏–Ω –∏–∑ –∫—Ä–∞–µ—É–≥–æ–ª—å–Ω—ã—Ö –∫–∞–º–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞ Smart Money.

–ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–Ω–∏–∑ (Sign of Distribution): –ü–µ—Ä–µ–¥ –≤–∞—à–∏–º "–∑–∞–∫–æ–ª–æ–º" (–æ—Ç—Å–∫–æ–∫–æ–º) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ –Ω–∞ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ. –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ "—É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏" —Ä–∞—Å–ø—Ä–æ–¥–∞–≤–∞–ª–∏ –∞–∫—Ç–∏–≤ ("distribution") —Ä–æ–∑–Ω–∏—á–Ω—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.

–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: –û–±—ä–µ–º –Ω–∞ –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–∞—Ö –ø–µ—Ä–µ–¥ –æ—Ç—Å–∫–æ–∫–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ.

–ù–∏–∑–∫–∏–π –æ–±—ä–µ–º –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ (Upthrust / No Demand): –í–∞—à –æ—Ç—Å–∫–æ–∫ –Ω–∞ 4 ATR –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–ª–∞–±–æ–º, –Ω–∏–∑–∫–æ–º –æ–±—ä–µ–º–µ. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ. –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫—Ä—É–ø–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ ‚Äî –æ–Ω–∏ –Ω–µ –ø–æ–∫—É–ø–∞—é—Ç. –≠—Ç–æ "–º–µ–¥–≤–µ–∂—å—è" –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è —Ü–µ–Ω–∞/–æ–±—ä–µ–º.

–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: –°—Ä–∞–≤–Ω–∏—Ç–µ –æ–±—ä–µ–º –Ω–∞ –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–∞—Ö –æ—Ç—Å–∫–æ–∫–∞ —Å –æ–±—ä–µ–º–æ–º –Ω–∞ –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–∞—Ö –ø–µ—Ä–µ–¥ –Ω–∏–º. –û–±—ä–µ–º –Ω–∞ –ø–æ–¥—ä–µ–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ.

Volume-Powered Breakdown: –ò–¥–µ–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ ‚Äî –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–ª–∞–±–æ–≥–æ –æ—Ç—Å–∫–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —É—Ä–æ–≤–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º) –∏ –ø—Ä–æ–¥–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ –≤—ã—Å–æ–∫–æ–º –æ–±—ä–µ–º–µ. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–∏–µ–º "–±–æ–ª—å—à–∏—Ö –¥–µ–Ω–µ–≥".

üìç 2. –ö—Ä–∏—Ç–µ—Ä–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ Price Action –∏ Order Blocks (–¶–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –ë–ª–æ–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤)
–û—Ç—Å–∫–æ–∫ –∫ –∫–ª—é—á–µ–≤–æ–º—É —É—Ä–æ–≤–Ω—é —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å–∫–æ—á–∏—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ "–≤ –Ω–∏–∫—É–¥–∞", –∞ –∫ –∑–Ω–∞—á–∏–º–æ–º—É —É—Ä–æ–≤–Ω—é.

–ü–µ—Ä–µ—Ö–∞–π (Break of Structure - BOS): –¶–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–π –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –º–∞–∫—Å–∏–º—É–º, –Ω–æ —Å—Ä–∞–∑—É –∂–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –Ω–µ –∑–∞–∫—Ä–µ–ø–ª—è—è—Å—å. –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–∑–Ω–∞–∫ —Å–ª–∞–±–æ—Å—Ç–∏.

Order Block (OB) / Fair Value Gap (FVG): –û—Ç—Å–∫–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ –∫ –º–µ–¥–≤–µ–∂—å–µ–º—É "–±–ª–æ–∫—É –æ—Ä–¥–µ—Ä–æ–≤" –∏–ª–∏ "–º–µ–¥–≤–µ–∂—å–µ–º—É FVG" (—Å–≤–µ—á–Ω–æ–π –º–æ–¥–µ–ª–∏, –≥–¥–µ –±–æ–ª—å—à–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ä–∞–∑—Ä—ã–≤). "–£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏" –±—É–¥—É—Ç –∑–∞—â–∏—â–∞—Ç—å —ç—Ç–∏ –∑–æ–Ω—ã.

–ö–ª—é—á–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –§–∏–±–æ–Ω–∞—á—á–∏: –û—Ç—Å–∫–æ–∫ –¥–æ —É—Ä–æ–≤–Ω—è 61.8%, 78.6% –∏–ª–∏ 88.6% –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞–¥–µ–Ω–∏—è.

–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏: –ù–∞ –ø–∏–∫–µ –æ—Ç—Å–∫–æ–∫–∞ –¥–æ–ª–∂–Ω—ã —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã:

–ü–∏–Ω-–±–∞—Ä (Pin Bar) / –°–≤–µ—á–∞ —Å –¥–ª–∏–Ω–Ω–æ–π –≤–µ—Ä—Ö–Ω–µ–π —Ç–µ–Ω—å—é.

–ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ (Bearish Engulfing).

–í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞ (Evening Star).

–§–ª–∞–≥/–í—ã–º–ø–µ–ª (–∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø–∞–¥–µ–Ω–∏—è).

üìä 3. –ö—Ä–∏—Ç–µ—Ä–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ Market Structure (–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞)
–°–º–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (Market Structure Shift - MSS) –≤ –º–µ–¥–≤–µ–∂—å—é —Å—Ç–æ—Ä–æ–Ω—É: –≠—Ç–æ must-have –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —à–æ—Ä—Ç –¥–æ–∂–¥–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Ü–µ–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞:

–ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –º–∏–Ω–∏–º—É–º (Lower Low - LL) –ø–æ—Å–ª–µ –æ—Ç—Å–∫–æ–∫–∞.

–ê –∑–∞—Ç–µ–º ‚Äî –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –º–∞–∫—Å–∏–º—É–º (Lower High - LH).

–°–º–µ—â–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (Liquidity Grab): –ß–∞—Å—Ç–æ –ø–µ—Ä–µ–¥ –±–æ–ª—å—à–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –≤–Ω–∏–∑ "—É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏" –≤—ã—à–∏–±–∞—é—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –Ω–∞–¥ –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –º–∞–∫—Å–∏–º—É–º–∞–º–∏ (–∫–∞–∫ —Ä–∞–∑ –≤–∞—à –æ—Ç—Å–∫–æ–∫ –Ω–∞ 4 ATR –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–∏–º –≤—ã–Ω–æ—Å–æ–º), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –ª—É—á—à–µ–µ —Ü–µ–Ω–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.

üß† 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–ü–æ–≤—ã—à–∞—é—â–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è RSI / MACD: –ù–∞ –≤–∞—à–µ–º –æ—Ç—Å–∫–æ–∫–µ –≤–≤–µ—Ä—Ö (–Ω–∞ 4 ATR) –¥–æ–ª–∂–Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–µ–¥–≤–µ–∂—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –Ω–∞ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞—Ö. –¶–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–π –≤—ã—Å–æ–∫–∏–π –º–∞–∫—Å–∏–º—É–º, –∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ‚Äî –Ω–µ—Ç. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏—Å—Ç–æ—â–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ EMA/MA –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: –û—Ç—Å–∫–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50 –∏–ª–∏ 200 EMA), –∫–æ—Ç–æ—Ä–∞—è –≤—ã—Å—Ç—É–ø–∏–ª–∞ –≤ —Ä–æ–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –∏ —Ü–µ–Ω–∞ –æ—Ç—Ä–∏–∫–æ—à–µ—Ç–∏–ª–∞ –æ—Ç –Ω–µ–µ.

–û–±—â–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –ê–∫—Ç–∏–≤ –¥–æ–ª–∂–µ–Ω —à–æ—Ä—Ç–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:

–í–µ—Å—å —Ä—ã–Ω–æ–∫ (BTC, SPX) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏.

–ê–∫—Ç–∏–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–Ω—á–º–∞—Ä–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ª—å—Ç–∫–æ–∏–Ω —Å–ª–∞–±–µ–µ—Ç BTC).

üß© –ü—Ä–∏–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–µ—Ç–∞–ø–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ SHORT:
–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã—Å–æ–∫–æ–º –æ–±—ä–µ–º–µ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ).

–û—Ç—Å–∫–æ–∫: –¶–µ–Ω–∞ –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ—Ç –Ω–∞ 4 ATR –≤–≤–µ—Ä—Ö, –Ω–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –Ω–∞ –ù–ò–ó–ö–û–ú –û–ë–™–ï–ú–ï (No Demand).

–£—Ä–æ–≤–µ–Ω—å: –û—Ç—Å–∫–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ –Ω–∞ –∫–ª—é—á–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã—á–∏–π Order Block –∏–ª–∏ 61.8% –§–∏–±–æ) + —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å (–ü–∏–Ω-–±–∞—Ä).

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –ü–æ—è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–≤–µ–∂—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è RSI.

–°–º–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è –≤—ã—à–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –º–∏–Ω–∏–º—É–º (LL), –∞ –∑–∞—Ç–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –º–∞–∫—Å–∏–º—É–º (LH).

–í—Ö–æ–¥: –í—Ö–æ–¥ –≤ —à–æ—Ä—Ç –Ω–∞ —Ä–µ—Ç–µ—Å—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ (LH) –∏–ª–∏ –Ω–∞ –ø—Ä–æ–±–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ç–∞–≤–∏—Ç—Å—è –≤—ã—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–∏–º–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞.

–í–∞—à —Ç–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π (1) ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç 2 –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ. –î–æ–±–∞–≤–∏–≤ –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞, –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ä–æ–≤–Ω–µ–π –∏ —Å–º–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞, –≤—ã –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫ –∏ –±—É–¥–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–µ "–≤ –Ω–∞–¥–µ–∂–¥–µ –Ω–∞ –æ—Ç—Å–∫–æ–∫", –∞ –ø–æ —è—Å–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞ –ª–æ–≥–∏–∫–µ "—É–º–Ω—ã—Ö –¥–µ–Ω–µ–≥".

–∞ –µ—Å–ª–∏ —è –ø–æ–¥–≥—Ä—É–∂—É —Ç–µ–±–µ zip-–∞—Ä—Ö–∏–≤, —á—Ç–æ–±—ã —Ç—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏–ª –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–¥?
—Ö–æ—á—É —Å–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫ –±—ã —Ç—ã –∏–Ω–∞—á–µ —Å–¥–µ–ª–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
–ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å zip-–∞—Ä—Ö–∏–≤, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –∏ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —É–ª—É—á—à–µ–Ω–∏—è.

–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ —É –≤–∞—Å —Å–µ–π—á–∞—Å —É—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é (–∫–æ–¥ –∏–ª–∏ –ø—Å–µ–≤–¥–æ–∫–æ–¥), –∏ —è –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Smart Money.

–ù–∞–ø—Ä–∏–º–µ—Ä:

–ö–∞–∫ –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ ATR?

–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ significantPriceChange?

–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ–±—ä–µ–º?

–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π?

–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ —Å–º–µ–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞?

–ñ–¥—É –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º!

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å zip-–∞—Ä—Ö–∏–≤–∞–º–∏ –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã. –û–¥–Ω–∞–∫–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥:

–ö–∞–∫ –º—ã –º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –≤–∞—à—É –∑–∞–¥–∞—á—É:
–û–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º –∑–¥–µ—Å—å:

–õ–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ö–æ–¥–∞ (–∫–∞–∫ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ ATR, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ significantPriceChange)

–°—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ

–ö–∞–∫ –≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—Ä–¥–µ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø–æ–∑–∏—Ü–∏—è–º–∏

–ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Å—Ç –≤ –∫–æ–¥–µ, –≥–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É

–û–ø–∏—à–∏—Ç–µ —Ç–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —è —Å–º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Smart Money, –¥–æ–±–∞–≤–∏–≤:

–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞:

–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∑–∫–∏–º)

–û–±—ä–µ–º –ø—Ä–∏ –ø—Ä–æ–±–æ–µ —É—Ä–æ–≤–Ω–µ–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Å–æ–∫–∏–º)

–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:

–ê–Ω–∞–ª–∏–∑ —Å–º–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (MSS)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è

–ü–æ–∏—Å–∫ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π:

–ú–µ–¥–≤–µ–∂—å–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ RSI/MACD

–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –æ–±—ä–µ–º–æ–º

–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä—ã–Ω–∫–∞:

–û–±—â–∏–π —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞

–°–∏–ª–∞/—Å–ª–∞–±–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–Ω—á–º–∞—Ä–∫–∞

–ü—Ä–∏–º–µ—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞:
javascript
// –ü—Å–µ–≤–¥–æ–∫–æ–¥ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
function shouldEnterShort() {
  // –í–∞—à —Ç–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π
  const hasSignificantBounce = checkSignificantPriceChange(4); // 4 ATR

  // –ù–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ Smart Money
  const hasLowVolumeOnBounce = checkVolumeDivergence(); // –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º –Ω–∞ —Ä–æ—Å—Ç–µ
  const atKeyResistance = isAtKeyResistanceLevel(); // –ù–∞—Ö–æ–¥–∏—Ç—Å—è —É –∫–ª—é—á–µ–≤–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
  const hasBearishDivergence = checkRSIDivergence(); // –ú–µ–¥–≤–µ–∂—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è RSI
  const marketStructureBroken = checkMarketStructureShift(); // –°–º–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–Ω–∏–∑

  // –û–±—â–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const isMarketBearish = checkOverallMarketTrend();

  return hasSignificantBounce &&
         hasLowVolumeOnBounce &&
         atKeyResistance &&
         hasBearishDivergence &&
         marketStructureBroken &&
         isMarketBearish;
}
–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏!

namespace App\Trading\Application\AutoOpen\Decision\Criteria;

abstract class AbstractOpenPositionCriteria implements Stringable
{
    abstract public function getAlias(): string;

    public function __toString(): string
    {
        return OutputHelper::shortClassName(static::class);
    }
}

namespace App\Trading\Application\AutoOpen\Decision\Criteria;

final class AthPricePartCriteria extends AbstractOpenPositionCriteria
{
    public function getAlias(): string
    {
        return 'at-h-l-price-appropriate';
    }
}

final readonly class AthPricePartCriteriaHandler implements OpenPositionPrerequisiteCheckerInterface, OpenPositionConfidenceRateDecisionVoterInterface
{
    public static function usedThresholdFromAth(RiskLevel $riskLevel): float
    {
        // @todo | autoOpen | funding time + hedge + close

        return match ($riskLevel) {
            RiskLevel::Cautious => 90,
            default => 85,
            RiskLevel::Aggressive => 75,
        };
    }

    public function supportsCriteriaCheck(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof AthPricePartCriteria;
    }

    public function supportsMakeConfidenceRateVote(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof AthPricePartCriteria;
    }

    public function checkCriteria(
        InitialPositionAutoOpenClaim $claim,
        AbstractOpenPositionCriteria|AthPricePartCriteria $criteria
    ): OpenPositionPrerequisiteCheckResult {
        $symbol = $claim->symbol;
        $positionSide = $claim->positionSide;

        if (!$positionSide->isShort()) {
            throw new LogicException('Now only for SHORTs');
        }

        $currentPricePartOfAth = $this->getCurrentPricePartOfAth($symbol);

        $riskLevel = $this->parameters->riskLevel($symbol, $positionSide);
        $threshold = self::usedThresholdFromAth($riskLevel);

        if ($currentPricePartOfAth->value() < $threshold) {
            $thresholdForNotification = $threshold;
            $thresholdForNotification -= ($thresholdForNotification / 10);

            return new OpenPositionPrerequisiteCheckResult(
                false,
                OutputHelper::shortClassName(self::class),
                sprintf('$currentPricePartOfAth (%s) < %s', $currentPricePartOfAth, $threshold),
                silent: $currentPricePartOfAth->value() < $thresholdForNotification // notify in some range
            );
        }

        return new OpenPositionPrerequisiteCheckResult(
            true,
            OutputHelper::shortClassName(self::class),
            sprintf('$currentPricePartOfAth (%s) >= %s)', $currentPricePartOfAth, $threshold)
        );
    }

    public function makeConfidenceRateVote(InitialPositionAutoOpenClaim $claim, AbstractOpenPositionCriteria $criteria): ConfidenceRate
    {
        $symbol = $claim->symbol;
        $currentPricePartOfAth = $this->getCurrentPricePartOfAth($symbol);

        return new ConfidenceRate(
            OutputHelper::shortClassName($this),
            $currentPricePartOfAth,
            'current price part of ATH'
        );
    }


    private function getCurrentPricePartOfAth(SymbolInterface $symbol): Percent
    {
        $ticker = $this->exchangeService->ticker($symbol);

        return TA::currentPricePartOfAth($symbol, $ticker->markPrice);
    }

    public function __construct(
        private ExchangeServiceInterface $exchangeService,
        private TradingParametersProviderInterface $parameters,
    ) {
    }
}

final class FundingIsAppropriateCriteria extends AbstractOpenPositionCriteria
{
    public function getAlias(): string
    {
        return 'funding-is-appropriate';
    }
}

final class FundingIsAppropriateCriteriaHandler implements OpenPositionPrerequisiteCheckerInterface
{
    public const float FUNDING_THRESHOLD_FOR_SHORT = -0.0001;

    public function __construct(
        private readonly MarketServiceInterface $fundingProvider,
    ) {
    }

    public function supportsCriteriaCheck(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof FundingIsAppropriateCriteria;
    }

    public function checkCriteria(
        InitialPositionAutoOpenClaim $claim,
        AbstractOpenPositionCriteria|FundingIsAppropriateCriteria $criteria
    ): OpenPositionPrerequisiteCheckResult {
        $symbol = $claim->symbol;
        $positionSide = $claim->positionSide;

        $funding = $this->fundingProvider->getPreviousPeriodFundingRate($symbol);


        if ($positionSide->isShort()) {
            if ($funding < self::FUNDING_THRESHOLD_FOR_SHORT) {
                return new OpenPositionPrerequisiteCheckResult(
                    false,
                    OutputHelper::shortClassName(self::class),
                    sprintf('prev funding on %s (%s) < %s', $symbol->name(), $funding, self::FUNDING_THRESHOLD_FOR_SHORT)
                );
            }
        } else {
            throw new RuntimeException('not implemented yet');
        }

        return new OpenPositionPrerequisiteCheckResult(true, OutputHelper::shortClassName(self::class), sprintf('current funding = %s', $funding));
    }
}

final class InstrumentAgeIsAppropriateCriteria extends AbstractOpenPositionCriteria
{
    public function getAlias(): string
    {
        return 'instrument-age-is-appropriate';
    }
}

final class InstrumentAgeIsAppropriateCriteriaHandler implements OpenPositionPrerequisiteCheckerInterface
{
    public const int DAYS_THRESHOLD = 6;

    public function supportsCriteriaCheck(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof InstrumentAgeIsAppropriateCriteria;
    }

    public function checkCriteria(
        InitialPositionAutoOpenClaim $claim,
        AbstractOpenPositionCriteria|InstrumentAgeIsAppropriateCriteria $criteria
    ): OpenPositionPrerequisiteCheckResult {
        $symbol = $claim->symbol;

        $minDaysAllowed = self::DAYS_THRESHOLD;
        $age = TA::instrumentAge($symbol);

        if ($age->countOfDays() < $minDaysAllowed) {
            return new OpenPositionPrerequisiteCheckResult(
                false,
                OutputHelper::shortClassName(self::class),
                sprintf('age of %s less than %d days (%s)', $symbol->name(), $minDaysAllowed, $age)
            );
        }

        return new OpenPositionPrerequisiteCheckResult(true, OutputHelper::shortClassName(self::class), sprintf('instrument age = %s', $age));
    }
}

final class OpenPositionPrerequisiteCheckResult
{
    public function __construct(
        public bool $success,
        public string $source,
        public string $info,
        public bool $silent = false,
        public ?int $confidenceMultiplier = null
    ) {
    }
}

final class ConfidenceRate
{
    /**
     * @param string $source
     * @param Percent $rate 0% and higher =)
     * @param string $info
     */
    public function __construct(
        public string $source,
        public Percent $rate,
        public string $info,
    ) {
        assert($this->rate->part() > 0);
    }
}

final class ConfidenceRateVotesCollection implements JsonSerializable, Stringable
{
    /** @var ConfidenceRate[]  */
    private array $votes;

    public function __construct(
        ConfidenceRate ...$votes
    ) {
        $this->votes = $votes;
    }

    public function add(ConfidenceRate $vote): self
    {
        $this->votes[] = $vote;

        return $this;
    }

    /**
     * @return Percent 0% and higher =)
     */
    public function getResultRate(): Percent
    {
        $resultRate = 1;

        foreach ($this->votes as $vote) {
            $resultRate = $vote->rate->of($resultRate);
        }

        return Percent::fromPart($resultRate, false);
    }

    public function getResultInfo(): array
    {
        $info = [];

        foreach ($this->votes as $vote) {
            if ($vote->rate->part() === 1.0) {
                continue;
            }

            $info[] = sprintf('x%.2f from %s (%s)', $vote->rate, $vote->source, $vote->info);
        }

        return $info;
    }

    public function jsonSerialize(): mixed
    {
        return [
            'votes' => $this->votes,
            'resultInfo' => $this->getResultInfo(),
        ];
    }

    public function __toString(): string
    {
        return json_encode($this);
    }
}

interface OpenPositionConfidenceRateDecisionVoterInterface
{
    public function supportsMakeConfidenceRateVote(AbstractOpenPositionCriteria $criteria): bool;
    public function makeConfidenceRateVote(InitialPositionAutoOpenClaim $claim, AbstractOpenPositionCriteria $criteria): ConfidenceRate;
}

interface OpenPositionPrerequisiteCheckerInterface
{
    public function supportsCriteriaCheck(AbstractOpenPositionCriteria $criteria): bool;
    public function checkCriteria(InitialPositionAutoOpenClaim $claim, AbstractOpenPositionCriteria $criteria): OpenPositionPrerequisiteCheckResult;
}

final readonly class InitialPositionAutoOpenClaim implements Stringable
{
    public function __construct(
        public SymbolInterface $symbol,
        public Side $positionSide,
        public AbstractReasonForOpen $reason,
    ) {
    }

    public function __toString(): string
    {
        return json_encode($this);
    }
}

final class PositionAutoOpenParameters implements JsonSerializable
{
    public function __construct(
        public Percent $percentOfDepositToUseAsMargin,
    ) {
    }
}

final class AutoOpenOnSignificantPriceChangeCriteriaCollectionFactory extends AbstractAutoOpenDecisionCriteriaCollectionFactory
{
    public function supports(InitialPositionAutoOpenClaim $claim): bool
    {
        return $claim->reason instanceof AutoOpenOnSignificantPriceChangeReason;
    }

    public function create(InitialPositionAutoOpenClaim $claim): array
    {
        if (!$this->supports($claim)) {
            throw new RuntimeException('unsupported reason');
        }

        return [
            new AutoOpenNotDisabledCriteria(),
            new InstrumentAgeIsAppropriateCriteria(),
            new FundingIsAppropriateCriteria(),
            new AthPricePartCriteria()
        ];
    }
}

final readonly class AutoOpenClaimReviewer
{
    public function handle(InitialPositionAutoOpenClaim $claim): AutoOpenClaimReviewResult
    {
        $criteriaCollection = $this->getCriteriaCollectionFactory($claim)->create($claim);

        foreach ($criteriaCollection as $criteria) {
            $checker = $this->getCriteriaChecker($criteria);
            $checkResult = $checker->checkCriteria($claim, $criteria);
            if (!$checkResult->success) {
                return AutoOpenClaimReviewResult::negative([
                    'failedChecks' => [$checkResult->source => $checkResult->info]
                ]);
            }
        }

        $symbol = $claim->symbol;
        $positionSide = $claim->positionSide;

        // @todo | autoOpen | calc size based on further liquidation (must be safe)
        // it can be another criteria =)

        $riskLevel = $this->parameters->riskLevel($symbol, $positionSide);

        [$minPercentOfDepositToUseAsMargin, $maxPercentOfDepositToUseAsMargin] = match ($riskLevel) {
            RiskLevel::Cautious => [0.6, 2],
            default => [0.8, 3],
            RiskLevel::Aggressive => [1.2, 5],
        };

        $confidenceRateVotes = new ConfidenceRateVotesCollection();
        foreach ($criteriaCollection as $criteria) {
            $criteriaVoters = $this->getConfidenceRateVoters($criteria);
            foreach ($criteriaVoters as $voter) {
                $confidenceRateVotes->add(
                    $voter->makeConfidenceRateVote($claim, $criteria)
                );
            }
        }

### calc part of deposit to use as margin (on 100xLeverage)
        $finalRate = $confidenceRateVotes->getResultRate();

        $percentOfDepositToUseAsMargin = $finalRate->of($maxPercentOfDepositToUseAsMargin);
        $percentOfDepositToUseAsMargin = max($minPercentOfDepositToUseAsMargin, $percentOfDepositToUseAsMargin);

        return new AutoOpenClaimReviewResult(
            new PositionAutoOpenParameters(
                new Percent($percentOfDepositToUseAsMargin)
            ),
            $confidenceRateVotes,
        );
    }

    private function getCriteriaCollectionFactory(InitialPositionAutoOpenClaim $claim): AbstractAutoOpenDecisionCriteriaCollectionFactory
    {
        foreach ($this->criteriaCollectionFactories as $factory) {
            if ($factory->supports($claim)) {
                return $factory;
            }
        }

        throw new RuntimeException(sprintf('Cannot find criteria collection factory for %s claim', $claim));
    }

    private function getCriteriaChecker(AbstractOpenPositionCriteria $criteria): OpenPositionPrerequisiteCheckerInterface
    {
        foreach ($this->criteriaCheckers as $checker) {
            if ($checker->supportsCriteriaCheck($criteria)) {
                return $checker;
            }
        }

        throw new RuntimeException(sprintf('Cannot find criteria checker for %s criteria', $criteria));
    }

    /**
     * @param AbstractOpenPositionCriteria $criteria
     * @return OpenPositionConfidenceRateDecisionVoterInterface[]
     */
    private function getConfidenceRateVoters(AbstractOpenPositionCriteria $criteria): array
    {
        $applicableVotersForCriteria = [];

        foreach ($this->rateDecisionVoters as $voter) {
            if ($voter->supportsMakeConfidenceRateVote($criteria)) {
                $applicableVotersForCriteria[] = $voter;
            }
        }

        return $applicableVotersForCriteria;
    }

    /**
     * @param iterable<AbstractAutoOpenDecisionCriteriaCollectionFactory> $criteriaCollectionFactories
     * @param iterable<OpenPositionPrerequisiteCheckerInterface> $criteriaCheckers
     * @param iterable<OpenPositionConfidenceRateDecisionVoterInterface> $rateDecisionVoters
     */
    public function __construct(
        #[AutowireIterator('info.info_provider')]
        private iterable $criteriaCollectionFactories,

        #[AutowireIterator('trading.autoOpen.decision.criteria_checker')]
        private iterable $criteriaCheckers,

        #[AutowireIterator('trading.autoOpen.decision.confidence_rate_voter')]
        private iterable $rateDecisionVoters,

        private TradingParametersProviderInterface $parameters,
    ) {
    }
}

final class AutoOpenClaimReviewResult
{
    /**
     * @param array<array-key, mixed> $info
     */
    public function __construct(
        public ?PositionAutoOpenParameters $suggestedParameters,
        public ?ConfidenceRateVotesCollection $confidenceVotes,
        public array $info = [],
    ) {
        assert(($this->suggestedParameters && $this->confidenceVotes) || $this->info);
    }

    public static function negative(array $info): self
    {
        return new self(null, null, $info);
    }
}

final class AutoOpenOnSignificantPriceChangeReason extends AbstractReasonForOpen
{
    public function __construct(
        public SignificantPriceChangeFoundEvent $source
    ) {
    }

    public function getStringInfo(): string
    {
        $info = $this->source->info;
        $priceChangePercent = $info->info->getPriceChangePercent()->setOutputFloatPrecision(2);

        return sprintf(
            'significantPriceChange: [days=%.2f from %s].price=%s vs curr.price = %s: Œî = %s (%s > %s)',
            $info->info->partOfDayPassed,
            $info->info->fromDate->format('m-d'),
            $info->info->fromPrice,
            $info->info->toPrice,
            $info->info->priceDelta(),
            $priceChangePercent,
            $info->pricePercentChangeConsideredAsSignificant->setOutputFloatPrecision(2), // @todo | priceChange | +/-
        );
    }
}
–º–æ–∂–µ—à—å –≤ —Ç–∞–∫–æ–º –∂–µ —Å—Ç–∏–ª–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—ë–º–∞ –∏ —Ç.–¥.
–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ SmartMoney
–ú—ã —Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ–±—ä–µ–º–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ä—ã–Ω–∫–∞ –ø–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Smart Money.
–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.

VolumeAnalysisCriteria - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä–µ–º–∞ –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∑–∫–∏–º) –∏ –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Å–æ–∫–∏–º).

MarketStructureCriteria - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ –∏ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞).

–¢–∞–∫–∂–µ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å voters –¥–ª—è —ç—Ç–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ –≤–ª–∏—è–ª–∏ –Ω–∞ confidence rate.

–û–¥–Ω–∞–∫–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤ —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–≤—Å–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ" (prerequisite check),
–∞ –∑–∞—Ç–µ–º voters –≤–Ω–æ—Å—è—Ç —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ confidence rate.

–î–ª—è –æ–±—ä–µ–º–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –∏ —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ.

–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω:

VolumeAnalysisCriteria:

–í prerequisite check: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ—Å—Ö–æ–¥—è—â–µ–º –¥–≤–∏–∂–µ–Ω–∏–∏ (–æ—Ç—Å–∫–æ–∫–µ) –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –∞ –Ω–∞ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º - –≤—ã—à–µ.

–í voter: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence rate, –µ—Å–ª–∏ –æ–±—ä–µ–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ–º –Ω–∏–∂–µ –æ–±—ä–µ–º –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ, —Ç–µ–º –≤—ã—à–µ confidence –¥–ª—è —à–æ—Ä—Ç–∞).

MarketStructureCriteria:

–í prerequisite check: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—ã–Ω–æ–∫ —Å–º–µ–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª Lower High –∏ Lower Low –¥–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞).

–í voter: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence rate, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —è–≤–Ω–æ –º–µ–¥–≤–µ–∂—å—è.

–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —ç—Ç–∏ –∫–ª–∞—Å—Å—ã.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–º–æ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–µ—á–∏). –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∏–º —á–µ—Ä–µ–∑ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å–µ—Ä–≤–∏—Å.

–î–ª—è –ø—Ä–∏–º–µ—Ä–∞, —è —Å–æ–∑–¥–∞–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.

–í–∞–∂–Ω–æ: –ú—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Ä–æ–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π.

–ù–∞—á–Ω–µ–º —Å VolumeAnalysisCriteria.

–û—Ç–ª–∏—á–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞! –í–∏–¥–Ω–æ, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π. –î–æ–±–∞–≤–∏–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞ –∏ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ.

1. –ö—Ä–∏—Ç–µ—Ä–∏–π –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞ (Volume Analysis)
php
namespace App\Trading\Application\AutoOpen\Decision\Criteria;

final class VolumeAnalysisCriteria extends AbstractOpenPositionCriteria
{
    public function getAlias(): string
    {
        return 'volume-analysis-appropriate';
    }
}

final readonly class VolumeAnalysisCriteriaHandler implements
    OpenPositionPrerequisiteCheckerInterface,
    OpenPositionConfidenceRateDecisionVoterInterface
{
    private const float VOLUME_DIVERGENCE_THRESHOLD = 0.7; // 70% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞
    private const float VOLUME_SPIKE_THRESHOLD = 1.5; // 150% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞

    public function supportsCriteriaCheck(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof VolumeAnalysisCriteria;
    }

    public function supportsMakeConfidenceRateVote(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof VolumeAnalysisCriteria;
    }

    public function checkCriteria(
        InitialPositionAutoOpenClaim $claim,
        AbstractOpenPositionCriteria|VolumeAnalysisCriteria $criteria
    ): OpenPositionPrerequisiteCheckResult {
        $symbol = $claim->symbol;
        $positionSide = $claim->positionSide;

        if (!$positionSide->isShort()) {
            throw new LogicException('Now only for SHORTs');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        $candles = $this->candleService->getRecentCandles($symbol, '1d', 20);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
        $volumeAnalysis = $this->analyzeVolumePatterns($candles);

        if (!$volumeAnalysis['has_low_volume_on_bounce']) {
            return new OpenPositionPrerequisiteCheckResult(
                false,
                OutputHelper::shortClassName(self::class),
                'Volume on bounce is not low enough for Smart Money pattern'
            );
        }

        if (!$volumeAnalysis['has_high_volume_on_decline']) {
            return new OpenPositionPrerequisiteCheckResult(
                false,
                OutputHelper::shortClassName(self::class),
                'No high volume on decline detected'
            );
        }

        return new OpenPositionPrerequisiteCheckResult(
            true,
            OutputHelper::shortClassName(self::class),
            sprintf(
                'Volume patterns appropriate: bounce volume=%.2f%%, decline volume=%.2f%%',
                $volumeAnalysis['bounce_volume_ratio'] * 100,
                $volumeAnalysis['decline_volume_ratio'] * 100
            )
        );
    }

    public function makeConfidenceRateVote(InitialPositionAutoOpenClaim $claim, AbstractOpenPositionCriteria $criteria): ConfidenceRate
    {
        $symbol = $claim->symbol;
        $candles = $this->candleService->getRecentCandles($symbol, '1d', 20);
        $volumeAnalysis = $this->analyzeVolumePatterns($candles);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ volume patterns
        $confidenceScore = $this->calculateVolumeConfidenceScore($volumeAnalysis);

        return new ConfidenceRate(
            OutputHelper::shortClassName($this),
            Percent::fromPart($confidenceScore, false),
            sprintf(
                'Volume analysis score: %.2f (bounce: %.2f%%, decline: %.2f%%)',
                $confidenceScore,
                $volumeAnalysis['bounce_volume_ratio'] * 100,
                $volumeAnalysis['decline_volume_ratio'] * 100
            )
        );
    }

    private function analyzeVolumePatterns(array $candles): array
    {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        $averageVolume = array_sum(array_column($candles, 'volume')) / count($candles);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        $recentCandles = array_slice($candles, -5);
        $hasLowVolumeOnBounce = false;
        $hasHighVolumeOnDecline = false;
        $bounceVolumeRatio = 1.0;
        $declineVolumeRatio = 1.0;

        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º –Ω–∞ —Ä–æ—Å—Ç–µ, –≤—ã—Å–æ–∫–∏–π –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏
        for ($i = 1; $i < count($recentCandles); $i++) {
            $current = $recentCandles[$i];
            $previous = $recentCandles[$i - 1];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Ö–æ–¥—è—â—É—é —Å–≤–µ—á—É —Å –Ω–∏–∑–∫–∏–º –æ–±—ä–µ–º–æ–º
            if ($current['close'] > $previous['close']) {
                $volumeRatio = $current['volume'] / $averageVolume;
                if ($volumeRatio < self::VOLUME_DIVERGENCE_THRESHOLD) {
                    $hasLowVolumeOnBounce = true;
                    $bounceVolumeRatio = $volumeRatio;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—Å—Ö–æ–¥—è—â—É—é —Å–≤–µ—á—É —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º
            if ($current['close'] < $previous['close']) {
                $volumeRatio = $current['volume'] / $averageVolume;
                if ($volumeRatio > self::VOLUME_SPIKE_THRESHOLD) {
                    $hasHighVolumeOnDecline = true;
                    $declineVolumeRatio = $volumeRatio;
                }
            }
        }

        return [
            'has_low_volume_on_bounce' => $hasLowVolumeOnBounce,
            'has_high_volume_on_decline' => $hasHighVolumeOnDecline,
            'bounce_volume_ratio' => $bounceVolumeRatio,
            'decline_volume_ratio' => $declineVolumeRatio,
        ];
    }

    private function calculateVolumeConfidenceScore(array $volumeAnalysis): float
    {
        $score = 1.0;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–±—ä–µ–º–∞
        if ($volumeAnalysis['has_low_volume_on_bounce']) {
            $score *= (1 + (1 - $volumeAnalysis['bounce_volume_ratio']));
        }

        if ($volumeAnalysis['has_high_volume_on_decline']) {
            $score *= (1 + ($volumeAnalysis['decline_volume_ratio'] - 1));
        }

        return min($score, 2.0); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    }

    public function __construct(
        private CandleServiceInterface $candleService,
    ) {
    }
}
2. –ö—Ä–∏—Ç–µ—Ä–∏–π —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (Market Structure)
php
namespace App\Trading\Application\AutoOpen\Decision\Criteria;

final class MarketStructureCriteria extends AbstractOpenPositionCriteria
{
    public function getAlias(): string
    {
        return 'market-structure-appropriate';
    }
}

final readonly class MarketStructureCriteriaHandler implements
    OpenPositionPrerequisiteCheckerInterface,
    OpenPositionConfidenceRateDecisionVoterInterface
{
    public function supportsCriteriaCheck(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof MarketStructureCriteria;
    }

    public function supportsMakeConfidenceRateVote(AbstractOpenPositionCriteria $criteria): bool
    {
        return $criteria instanceof MarketStructureCriteria;
    }

    public function checkCriteria(
        InitialPositionAutoOpenClaim $claim,
        AbstractOpenPositionCriteria|MarketStructureCriteria $criteria
    ): OpenPositionPrerequisiteCheckResult {
        $symbol = $claim->symbol;
        $positionSide = $claim->positionSide;

        if (!$positionSide->isShort()) {
            throw new LogicException('Now only for SHORTs');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        $candles = $this->candleService->getRecentCandles($symbol, '1d', 30);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        $structureAnalysis = $this->analyzeMarketStructure($candles);

        if (!$structureAnalysis['has_bearish_structure']) {
            return new OpenPositionPrerequisiteCheckResult(
                false,
                OutputHelper::shortClassName(self::class),
                'Market structure is not bearish (no Lower High + Lower Low pattern)'
            );
        }

        return new OpenPositionPrerequisiteCheckResult(
            true,
            OutputHelper::shortClassName(self::class),
            sprintf(
                'Bearish market structure confirmed: %d Lower Highs, %d Lower Lows',
                $structureAnalysis['lower_high_count'],
                $structureAnalysis['lower_low_count']
            )
        );
    }

    public function makeConfidenceRateVote(InitialPositionAutoOpenClaim $claim, AbstractOpenPositionCriteria $criteria): ConfidenceRate
    {
        $symbol = $claim->symbol;
        $candles = $this->candleService->getRecentCandles($symbol, '1d', 30);
        $structureAnalysis = $this->analyzeMarketStructure($candles);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã –º–µ–¥–≤–µ–∂—å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        $confidenceScore = $this->calculateStructureConfidenceScore($structureAnalysis);

        return new ConfidenceRate(
            OutputHelper::shortClassName($this),
            Percent::fromPart($confidenceScore, false),
            sprintf(
                'Market structure score: %.2f (%d LH, %d LL)',
                $confidenceScore,
                $structureAnalysis['lower_high_count'],
                $structureAnalysis['lower_low_count']
            )
        );
    }

    private function analyzeMarketStructure(array $candles): array
    {
        $highs = array_column($candles, 'high');
        $lows = array_column($candles, 'low');

        $lowerHighCount = 0;
        $lowerLowCount = 0;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        for ($i = count($highs) - 2; $i >= max(0, count($highs) - 10); $i--) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Lower High
            if ($highs[$i] < $highs[$i + 1]) {
                $lowerHighCount++;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Lower Low
            if ($lows[$i] < $lows[$i + 1]) {
                $lowerLowCount++;
            }
        }

        // –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–¥–≤–µ–∂—å–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 Lower High –∏ 2 Lower Low
        $hasBearishStructure = ($lowerHighCount >= 2 && $lowerLowCount >= 2);

        return [
            'has_bearish_structure' => $hasBearishStructure,
            'lower_high_count' => $lowerHighCount,
            'lower_low_count' => $lowerLowCount,
        ];
    }

    private function calculateStructureConfidenceScore(array $structureAnalysis): float
    {
        if (!$structureAnalysis['has_bearish_structure']) {
            return 0.8; // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —è–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        $score = 1.0 +
                 ($structureAnalysis['lower_high_count'] * 0.1) +
                 ($structureAnalysis['lower_low_count'] * 0.1);

        return min($score, 1.5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    }

    public function __construct(
        private CandleServiceInterface $candleService,
    ) {
    }
}
3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
php
final class AutoOpenOnSignificantPriceChangeCriteriaCollectionFactory extends AbstractAutoOpenDecisionCriteriaCollectionFactory
{
    public function supports(InitialPositionAutoOpenClaim $claim): bool
    {
        return $claim->reason instanceof AutoOpenOnSignificantPriceChangeReason;
    }

    public function create(InitialPositionAutoOpenClaim $claim): array
    {
        if (!$this->supports($claim)) {
            throw new RuntimeException('unsupported reason');
        }

        return [
            new AutoOpenNotDisabledCriteria(),
            new InstrumentAgeIsAppropriateCriteria(),
            new FundingIsAppropriateCriteria(),
            new AthPricePartCriteria(),
            new VolumeAnalysisCriteria(), // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            new MarketStructureCriteria(), // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞
        ];
    }
}
4. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
php
interface CandleServiceInterface
{
    public function getRecentCandles(SymbolInterface $symbol, string $timeframe, int $limit): array;
}
–ü–æ—è—Å–Ω–µ–Ω–∏—è:
VolumeAnalysisCriteria –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:

–ù–∏–∑–∫–∏–π –æ–±—ä–µ–º –Ω–∞ –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö (–æ—Ç—Å–∫–æ–∫–∞—Ö)

–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –Ω–∞ –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö

–≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω "Smart Money": –∫—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–¥–∞—é—Ç –Ω–∞ —Ç–∏—Ö–∏—Ö –æ—Ç—Å–∫–æ–∫–∞—Ö

MarketStructureCriteria –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:

–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Lower High + Lower Low

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –º–µ–¥–≤–µ–∂–∏–π

–ß–µ–º –±–æ–ª—å—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —Ç–µ–º –≤—ã—à–µ confidence

–û–±–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è:

–†–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ prerequisite check (–º–æ–≥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏)

–í–ª–∏—è—é—Ç –Ω–∞ confidence rate (—É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç/—É–º–µ–Ω—å—à–∞—é—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏)

–°–ª–µ–¥—É—é—Ç —Ç–æ–π –∂–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –ø–∞—Ä–∞–¥–∏–≥–º–µ, —á—Ç–æ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏

–≠—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∏–ª—è—Ç –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É, –¥–æ–±–∞–≤–∏–≤ –≤ –Ω–µ–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ Smart Money –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π –æ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏–∏.

private function analyzeVolumePatterns(array $candles): array

–∞ –∑–¥–µ—Å—å —Ç—ã –Ω–µ –¥–µ–ª–∞–µ—à—å –Ω–∏–∫–∞–∫–æ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è count –∫–∞–∫ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ä—ã–Ω–∫–∞? –µ—Å–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –æ—Ç—Ä–µ–∑–∫–æ–≤ ($current['close'] > $previous['close']) / ($current['close'] < $previous['close']) –≤—Å—Ç—Ä–µ—Ç–∏–ª –ø—Ä–∏–∑–Ω–∞–∫ - —Ç–æ —ç—Ç–æ —É–∂–µ true?
–Ω—É —Ç–æ–≥–¥–∞ —Ç–∞–º –Ω—É–∂–µ–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
–ª–∏–±–æ –≤—Å—ë —Ç–∞–∫–∏ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ —Å—É–º–º—É –Ω–∞ –æ–±—â–∏—Ö –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö / –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö?
–ú—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5) –∏ –≤—ã—è–≤–∏—Ç—å:

–ë—ã–ª–∏ –ª–∏ –≤–æ—Å—Ö–æ–¥—è—â–∏–µ —Å–≤–µ—á–∏ —Å –Ω–∏–∑–∫–∏–º –æ–±—ä–µ–º–æ–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ)

–ë—ã–ª–∏ –ª–∏ –Ω–∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤–µ—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º

–û–¥–Ω–∞–∫–æ, –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 5 —Å–≤–µ—á–∞–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–≤–µ—á–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—é.

–ù–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –º—ã —Ö–æ—Ç–∏–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π –æ–±—ä–µ–º –Ω–∏–∑–∫–∏–π, –∞ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö - –≤—ã—Å–æ–∫–∏–π.

–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é analyzeVolumePatterns, —á—Ç–æ–±—ã –æ–Ω–∞ —É—á–∏—Ç—ã–≤–∞–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.

–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è:

–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π –∏ –∏–∑ –Ω–∏—Ö —Å–∫–æ–ª—å–∫–æ –∏–º–µ—é—Ç –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º

–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π –∏ –∏–∑ –Ω–∏—Ö —Å–∫–æ–ª—å–∫–æ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º

–¢–æ–≥–¥–∞ –º—ã —Å–º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª–µ–µ 50% –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π –∏–º–µ—é—Ç –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º –∏ –±–æ–ª–µ–µ 50% –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º.

–û–¥–Ω–∞–∫–æ, –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Smart Money –Ω–∞–º –≤–∞–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ.

–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å (—Ñ–ª–∞–≥–∏), –Ω–æ —Ç–æ–≥–¥–∞ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å–≤–µ—á–µ.

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ —Å–≤–µ—á–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º (–≤–æ—Å—Ö–æ–¥—è—â–∞—è —Å –Ω–∏–∑–∫–∏–º –æ–±—ä–µ–º–æ–º –∏ –Ω–∏—Å—Ö–æ–¥—è—â–∞—è —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º).

–ù–æ –¥–∞–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É (—Ñ–ª–∞–≥–∏), –Ω–æ —É–ª—É—á—à–∏–º –ø–æ–¥—Å—á–µ—Ç.

–í–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ñ–ª–∞–≥–∏, –º—ã –º–æ–∂–µ–º —Ç–∞–∫–∂–µ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º.

–û–¥–Ω–∞–∫–æ, –¥–ª—è prerequisite check –Ω–∞–º –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –∞ –¥–ª—è confidence rate –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.

–ü–µ—Ä–µ–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–í—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤—ã! –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ ‚Äî –æ–Ω–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∞ –Ω–µ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É. –î–∞–≤–∞–π—Ç–µ —É–ª—É—á—à–∏–º –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞, —á—Ç–æ–±—ã –æ–Ω —É—á–∏—Ç—ã–≤–∞–ª —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–π.

–í–æ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ analyzeVolumePatterns:

php
private function analyzeVolumePatterns(array $candles): array
{
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
    $averageVolume = array_sum(array_column($candles, 'volume')) / count($candles);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    $recentCandles = array_slice($candles, -10);

    $upCandlesWithLowVolume = 0;
    $downCandlesWithHighVolume = 0;
    $totalUpCandles = 0;
    $totalDownCandles = 0;

    $bounceVolumeRatios = [];
    $declineVolumeRatios = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    for ($i = 1; $i < count($recentCandles); $i++) {
        $current = $recentCandles[$i];
        $previous = $recentCandles[$i - 1];

        $volumeRatio = $current['volume'] / $averageVolume;

        // –í–æ—Å—Ö–æ–¥—è—â–∞—è —Å–≤–µ—á–∞
        if ($current['close'] > $previous['close']) {
            $totalUpCandles++;
            if ($volumeRatio < self::VOLUME_DIVERGENCE_THRESHOLD) {
                $upCandlesWithLowVolume++;
                $bounceVolumeRatios[] = $volumeRatio;
            }
        }
        // –ù–∏—Å—Ö–æ–¥—è—â–∞—è —Å–≤–µ—á–∞
        elseif ($current['close'] < $previous['close']) {
            $totalDownCandles++;
            if ($volumeRatio > self::VOLUME_SPIKE_THRESHOLD) {
                $downCandlesWithHighVolume++;
                $declineVolumeRatios[] = $volumeRatio;
            }
        }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
    $upVolumeRatio = $totalUpCandles > 0 ? $upCandlesWithLowVolume / $totalUpCandles : 0;
    $downVolumeRatio = $totalDownCandles > 0 ? $downCandlesWithHighVolume / $totalDownCandles : 0;

    // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –æ–±—ä–µ–º–æ–≤
    $avgBounceRatio = !empty($bounceVolumeRatios) ? array_sum($bounceVolumeRatios) / count($bounceVolumeRatios) : 1;
    $avgDeclineRatio = !empty($declineVolumeRatios) ? array_sum($declineVolumeRatios) / count($declineVolumeRatios) : 1;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —è–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Smart Money
    $hasLowVolumeOnBounce = $upVolumeRatio >= 0.5; // –•–æ—Ç—è –±—ã 50% –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π —Å –Ω–∏–∑–∫–∏–º –æ–±—ä–µ–º–æ–º
    $hasHighVolumeOnDecline = $downVolumeRatio >= 0.5; // –•–æ—Ç—è –±—ã 50% –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º

    return [
        'has_low_volume_on_bounce' => $hasLowVolumeOnBounce,
        'has_high_volume_on_decline' => $hasHighVolumeOnDecline,
        'up_candles_with_low_volume' => $upCandlesWithLowVolume,
        'down_candles_with_high_volume' => $downCandlesWithHighVolume,
        'total_up_candles' => $totalUpCandles,
        'total_down_candles' => $totalDownCandles,
        'avg_bounce_volume_ratio' => $avgBounceRatio,
        'avg_decline_volume_ratio' => $avgDeclineRatio,
    ];
}
–¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º –º–µ—Ç–æ–¥ calculateVolumeConfidenceScore:

php
private function calculateVolumeConfidenceScore(array $volumeAnalysis): float
{
    $score = 1.0;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–±—ä–µ–º–∞
    if ($volumeAnalysis['has_low_volume_on_bounce']) {
        $volumeMultiplier = 1 + (1 - $volumeAnalysis['avg_bounce_volume_ratio']);
        $countMultiplier = 1 + ($volumeAnalysis['up_candles_with_low_volume'] / max(1, $volumeAnalysis['total_up_candles']));
        $score *= $volumeMultiplier * $countMultiplier;
    }

    if ($volumeAnalysis['has_high_volume_on_decline']) {
        $volumeMultiplier = 1 + ($volumeAnalysis['avg_decline_volume_ratio'] - 1);
        $countMultiplier = 1 + ($volumeAnalysis['down_candles_with_high_volume'] / max(1, $volumeAnalysis['total_down_candles']));
        $score *= $volumeMultiplier * $countMultiplier;
    }

    return min($score, 2.0); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
}
–ò –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏:

php
public function checkCriteria(
    InitialPositionAutoOpenClaim $claim,
    AbstractOpenPositionCriteria|VolumeAnalysisCriteria $criteria
): OpenPositionPrerequisiteCheckResult {
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥

    if (!$volumeAnalysis['has_low_volume_on_bounce']) {
        return new OpenPositionPrerequisiteCheckResult(
            false,
            OutputHelper::shortClassName(self::class),
            sprintf(
                'Insufficient low volume bounce patterns: %d/%d up candles have low volume',
                $volumeAnalysis['up_candles_with_low_volume'],
                $volumeAnalysis['total_up_candles']
            )
        );
    }

    if (!$volumeAnalysis['has_high_volume_on_decline']) {
        return new OpenPositionPrerequisiteCheckResult(
            false,
            OutputHelper::shortClassName(self::class),
            sprintf(
                'Insufficient high volume decline patterns: %d/%d down candles have high volume',
                $volumeAnalysis['down_candles_with_high_volume'],
                $volumeAnalysis['total_down_candles']
            )
        );
    }

    return new OpenPositionPrerequisiteCheckResult(
        true,
        OutputHelper::shortClassName(self::class),
        sprintf(
            'Volume patterns appropriate: %d/%d up candles with low volume (avg: %.2f%%), %d/%d down candles with high volume (avg: %.2f%%)',
            $volumeAnalysis['up_candles_with_low_volume'],
            $volumeAnalysis['total_up_candles'],
            $volumeAnalysis['avg_bounce_volume_ratio'] * 100,
            $volumeAnalysis['down_candles_with_high_volume'],
            $volumeAnalysis['total_down_candles'],
            $volumeAnalysis['avg_decline_volume_ratio'] * 100
        )
    );
}
–≠—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç:

–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤–æ—Å—Ö–æ–¥—è—â–∏–µ –∏ –Ω–∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤–µ—á–∏ –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–º –ø–µ—Ä–∏–æ–¥–µ

–û—Ü–µ–Ω–∏–≤–∞—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –∞ –∏—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç—å

–ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å confidence score –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å–∏–ª—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö

–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –±–æ–ª–µ–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π.

—Ç—ã –º–Ω–µ —Ä–∞–Ω—å—à–µ –ø–∏—Å–∞–ª –≤–æ—Ç —Ç–∞–∫–æ–π –∫–æ–¥:



final class ZigZagPoint implements JsonSerializable
{
    public const PEAK = 'peak';
    public const TROUGH = 'trough';

    public function __construct(
        private int $candleIndex,
        private float $price,
        private string $type,
        private int $time,
    ) {
    }

    public function getCandleIndex(): int
    {
        return $this->candleIndex;
    }

    public function getPrice(): float
    {
        return $this->price;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function getUtcDatetime(): string
    {
        return date('Y-m-d H:i:s', $this->time);
    }

    public function jsonSerialize(): array
    {
        return [
            'time' => $this->time,
            'type' => $this->type,
            'price' => $this->price,
//            'utcDatetime' => $this->getUtcDatetime(),
        ];
    }
}

final class ZigZagFinder
{
    public const PEAK = 'peak';
    public const TROUGH = 'trough';

    private array $pivots = [];
    /** @var CandleDto[] */
    private array $candles = [];
    private ?int $lastPivotIndex = null;
    private ?float $lastPivotPrice = null;
    private ?string $lastPivotType = null;
    private ?float $currentExtremePrice = null;
    private ?int $currentExtremeIndex = null;

    public function find(array $candles): array
    {
        if (count($candles) < 3) return [];

        $this->candles = $candles;
        $this->resetState();

        for ($i = 1; $i < count($this->candles) - 1; $i++) {
            $this->processCandle($i);
        }

        $this->addFinalPoint();
        return $this->pivots;
    }

    private function resetState(): void
    {
        $this->pivots = [];
        $this->lastPivotIndex = null;
        $this->lastPivotPrice = null;
        $this->lastPivotType = null;
        $this->currentExtremePrice = null;
        $this->currentExtremeIndex = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è —Å–≤–µ—á–∞–º–∏
        $first = $this->candles[0];
        $second = $this->candles[1];

        if ($first->getHigh() > $second->getHigh()) {
            $this->lastPivotType = self::PEAK;
            $this->lastPivotPrice = $first->getHigh();
            $this->lastPivotIndex = 0;
        } elseif ($first->getLow() < $second->getLow()) {
            $this->lastPivotType = self::TROUGH;
            $this->lastPivotPrice = $first->getLow();
            $this->lastPivotIndex = 0;
        }
    }

    private function processCandle(int $index): void
    {
        $candle = $this->candles[$index];
        $prevCandle = $this->candles[$index-1];
        $nextCandle = $this->candles[$index+1];

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        $isPeak = $candle->getHigh() >= $prevCandle->getHigh() &&
            $candle->getHigh() >= $nextCandle->getHigh();

        $isTrough = $candle->getLow() <= $prevCandle->getLow() &&
            $candle->getLow() <= $nextCandle->getLow();

        if (!$isPeak && !$isTrough) {
            return;
        }

        if ($this->lastPivotType === null) {
            $this->initFirstPivot($index, $isPeak, $candle);
            return;
        }

        if ($isPeak) {
            $this->handlePeak($index, $candle);
        } elseif ($isTrough) {
            $this->handleTrough($index, $candle);
        }
    }

    private function initFirstPivot(int $index, bool $isPeak, CandleDto $candle): void
    {
        if ($isPeak) {
            $this->lastPivotType = self::PEAK;
            $this->lastPivotPrice = $candle->getHigh();
            $this->lastPivotIndex = $index;
        } else {
            $this->lastPivotType = self::TROUGH;
            $this->lastPivotPrice = $candle->getLow();
            $this->lastPivotIndex = $index;
        }
    }

    private function handlePeak(int $index, CandleDto $candle): void
    {
        $price = $candle->getHigh();

        if ($this->lastPivotType === self::TROUGH) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ—Ä—Ö
            if ($price > $this->lastPivotPrice) {
                $this->addPivot($index, $price, self::PEAK);
            }
        } elseif ($this->lastPivotType === self::PEAK) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            if ($price > $this->lastPivotPrice) {
                $this->updateLastPivot($index, $price, self::PEAK);
            }
        }
    }

    private function handleTrough(int $index, CandleDto $candle): void
    {
        $price = $candle->getLow();

        if ($this->lastPivotType === self::PEAK) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–∏–∑
            if ($price < $this->lastPivotPrice) {
                $this->addPivot($index, $price, self::TROUGH);
            }
        } elseif ($this->lastPivotType === self::TROUGH) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–ø–∞–¥–∏–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
            if ($price < $this->lastPivotPrice) {
                $this->updateLastPivot($index, $price, self::TROUGH);
            }
        }
    }

    private function addPivot(int $index, float $price, string $type): void
    {
        $this->pivots[] = new ZigZagPoint(
            $index,
            $price,
            $type,
//            $this->candles[$index]->getUtcDatetime()
            $this->candles[$index]->time
        );

        $this->lastPivotIndex = $index;
        $this->lastPivotPrice = $price;
        $this->lastPivotType = $type;
    }

    private function updateLastPivot(int $index, float $price, string $type): void
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
        $this->lastPivotIndex = $index;
        $this->lastPivotPrice = $price;
        $this->lastPivotType = $type;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –≤ –º–∞—Å—Å–∏–≤–µ
        if (!empty($this->pivots)) {
            $lastIndex = count($this->pivots) - 1;
            $this->pivots[$lastIndex] = new ZigZagPoint(
                $index,
                $price,
                $type,
                $this->candles[$index]->time
            );
        }
    }

    private function addFinalPoint(): void
    {
        if ($this->lastPivotIndex === null) return;

        $lastCandle = end($this->candles);
        $lastIndex = array_key_last($this->candles);

        if ($this->lastPivotType === self::PEAK) {
            $price = $lastCandle->getHigh();
            $type = self::PEAK;
        } else {
            $price = $lastCandle->getLow();
            $type = self::TROUGH;
        }

        $this->addPivot($lastIndex, $price, $type);
    }
}

–∏ —Ö–µ–Ω–¥–ª–µ—Ä:

final class ZigZagService
{
    public function __construct(private ZigZagFinder $finder)
    {
    }

    /**
     * @param array $candles
     * @return ZigZagPoint[]
     */
    public function findZigZagPoints(array $candles): array
    {
        return $this->finder->find($candles);
    }
}

ZigZagPoint –∏—â–µ—Ç "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–∫–∞—Ç—ã" –Ω–∞ –ø–µ—Ä–µ–¥—ã–Ω–Ω–æ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ

–º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω Finder (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–∫ –∏ –Ω–∞–¥–æ. –Ω–∞ –≤—Ö–æ–¥ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –º–∞—Å—Å–∏–≤ ZigZagPoint[]), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–ª—è –∏—Å–∫–∞—Ç—å –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä) idm, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–Ω—è—Ç —á–µ—Ä–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –¥–æ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞?
–ú—ã —Ö–æ—Ç–∏–º –Ω–∞–π—Ç–∏ IDM (Imbalance Delivery Model) - —ç—Ç–æ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏–º–±–∞–ª–∞–Ω—Å (–Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å) –∏ –∑–∞—Ç–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–∫–∞—Ç.
–û–±—ã—á–Ω–æ IDM –∏—â–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ü–µ–Ω–∞ —Å–¥–µ–ª–∞–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–∏–º–ø—É–ª—å—Å), –∑–∞—Ç–µ–º –æ—Ç–∫–∞—Ç–∏–ª–∞—Å—å, –∏ —Ç–µ–ø–µ—Ä—å –º—ã –∏—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –∫—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (—É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏) –≤—Ö–æ–¥—è—Ç –≤ —Ä—ã–Ω–æ–∫.

–û–¥–Ω–∞–∫–æ, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã —É–∂–µ –∏–º–µ–µ–º —Ç–æ—á–∫–∏ –∑–∏–≥–∑–∞–≥–∞ (ZigZagPoint), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ (–ø–∏–∫–∏ –∏ –≤–ø–∞–¥–∏–Ω—ã).

–ú—ã –º–æ–∂–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ IDM (–¥–ª—è —à–æ—Ä—Ç–æ–≤):

–ë—ã–ª –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å (–¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑) - —ç—Ç–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –ø–æ —Å–µ—Ä–∏–∏ –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –∏ –º–∞–∫—Å–∏–º—É–º–æ–≤.

–ó–∞—Ç–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–∫–∞—Ç –≤–≤–µ—Ä—Ö (—Ä–µ—Ç—Ä–∞–π—Å–º–µ–Ω—Ç) –∫ –∑–æ–Ω–µ –∏–º–±–∞–ª–∞–Ω—Å–∞ (–∏–ª–∏ –∫ –∑–æ–Ω–µ, –≥–¥–µ –±—ã–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å).

–í —ç—Ç–æ–π –∑–æ–Ω–µ –º—ã –∏—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –Ω–∞ –ø–æ–¥—ä–µ–º–µ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–∏.

–ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–æ—á–∫–∏ –∑–∏–≥–∑–∞–≥–∞, –º—ã –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å -> –æ—Ç–∫–∞—Ç -> –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.

–û–¥–Ω–∞–∫–æ, —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏: –Ω–∞–π—Ç–∏ IDM, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–Ω—è—Ç —á–µ—Ä–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –¥–æ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞.

–£—Ç–æ—á–Ω–µ–Ω–∏–µ: –∏–º–±–∞–ª–∞–Ω—Å (–Ω–µ–±–∞–ª–∞–Ω—Å) - —ç—Ç–æ —Ü–µ–Ω–æ–≤–æ–π —Ä–∞–∑—Ä—ã–≤ (–≥—ç–ø) –∏–ª–∏ –±—ã—Å—Ç—Ä—ã–π –¥–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–∫–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–ª–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å.

–ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è Finder (–Ω–∞–∑–æ–≤–µ–º –µ–≥–æ ImbalanceDeliveryModelFinder):

–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç–æ—á–∫–∞–º –∑–∏–≥–∑–∞–≥–∞ –∏ –∏—â–µ–º –∏–º–ø—É–ª—å—Å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è (–¥–ª–∏–Ω–Ω—ã–µ —Å–≤–µ—á–∏ —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º) –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–∫–∞—Ç—ã.

–ò—â–µ–º –∏–º–±–∞–ª–∞–Ω—Å—ã (–≥—ç–ø—ã) –Ω–∞ –∏–º–ø—É–ª—å—Å–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏. –ò–º–±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä—ã–≤ (—Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–π) –∏–ª–∏ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–∫–∞—Ç–∞.

–ü–æ—Å–ª–µ –∏–º–±–∞–ª–∞–Ω—Å–∞ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è (–∑–∞–ø–æ–ª–Ω–∏—Ç—å) —ç—Ç—É –æ–±–ª–∞—Å—Ç—å, –∏ —Ç–æ–≥–¥–∞ –º—ã –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –∏–º–±–∞–ª–∞–Ω—Å —Å–Ω—è—Ç.

–ó–∞—Ç–µ–º –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç–∫–∞—Ç (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –≤ –∑–∏–≥–∑–∞–≥–µ) –∏ –∑–∞—Ç–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—Ö–æ–¥–∞ —É–º–Ω—ã—Ö –¥–µ–Ω–µ–≥ (IDM).

–û–¥–Ω–∞–∫–æ, –≤ —É—Å–ª–æ–≤–∏–∏ —Å–∫–∞–∑–∞–Ω–æ: "idm, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–Ω—è—Ç —á–µ—Ä–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –¥–æ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞".

–í–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É, —á—Ç–æ –º—ã –∏—â–µ–º –æ—Ç–∫–∞—Ç (—Ä–µ—Ç—Ä–∞–π—Å–º–µ–Ω—Ç) –ø–æ—Å–ª–µ –∏–º–ø—É–ª—å—Å–∞, –∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –æ—Ç–∫–∞—Ç–æ–º –±—ã–ª –∏–º–±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.

–î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –¥–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –ø–æ–∏—Å–∫–µ –∏–º–±–∞–ª–∞–Ω—Å–æ–≤ –∏ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª –ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–∫–∞—Ç (–∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∏–¥–∏–º –≤ –∑–∏–≥–∑–∞–≥–µ).

–®–∞–≥–∏:

–ù–∞–π—Ç–∏ –∏–º–±–∞–ª–∞–Ω—Å—ã –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ (–≥—ç–ø—ã –∏–ª–∏ –æ—á–µ–Ω—å —Ä–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è).

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏–º–±–∞–ª–∞–Ω—Å –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω (—Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –æ–±–ª–∞—Å—Ç—å –∏–º–±–∞–ª–∞–Ω—Å–∞ –∏ –∑–∞–∫—Ä—ã–ª–∞ –≥—ç–ø).

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞–ª –æ—Ç–∫–∞—Ç (–∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∏–¥–∏–º –≤ –∑–∏–≥–∑–∞–≥–µ) –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.

–î–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è (—à–æ—Ä—Ç—ã):

–ò–º–ø—É–ª—å—Å –≤–Ω–∏–∑ -> –∏–º–±–∞–ª–∞–Ω—Å –≤–Ω–∏–∑ -> –æ—Ç–∫–∞—Ç –≤–≤–µ—Ä—Ö (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞) -> —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (IDM) –∏ –∑–∞—Ç–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑.

–ú—ã —Ö–æ—Ç–∏–º –Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≥–¥–µ –∏–º–±–∞–ª–∞–Ω—Å –≤–Ω–∏–∑ –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç–æ–º –≤–≤–µ—Ä—Ö, –∏ –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ –Ω–∞—á–∞–ª–æ—Å—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ (–∫–æ—Ç–æ—Ä–æ–µ –º—ã –º–æ–∂–µ–º –≤–∏–¥–µ—Ç—å –≤ –∑–∏–≥–∑–∞–≥–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –ø–∏–∫ –∏ –∑–∞—Ç–µ–º –ø–∞–¥–µ–Ω–∏–µ).

–ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –ø–æ–ª—É—á–∞–µ–º –Ω–∞ –≤—Ö–æ–¥ —Ç–æ—á–∫–∏ –∑–∏–≥–∑–∞–≥–∞, –º—ã –º–æ–∂–µ–º –∏—Å–∫–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

text
... -> –ø–∏–∫ (P1) -> –ø–∞–¥–µ–Ω–∏–µ –¥–æ –≤–ø–∞–¥–∏–Ω—ã (T1) [–∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑] -> –æ—Ç–∫–∞—Ç –¥–æ –ø–∏–∫–∞ (P2) [–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –º–µ–∂–¥—É P1 –∏ T1] -> –ø–∞–¥–µ–Ω–∏–µ –¥–æ –≤–ø–∞–¥–∏–Ω—ã (T2) [–Ω–æ–≤—ã–π –º–∏–Ω–∏–º—É–º]
–ü—Ä–∏ —ç—Ç–æ–º –º–µ–∂–¥—É P1 –∏ T1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –æ—Ç T1 –∫ P2.

–ö–∞–∫ –Ω–∞–π—Ç–∏ –∏–º–±–∞–ª–∞–Ω—Å?

text
–ò–º–±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ (–¥–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è) –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç (–¥–ª—è –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ).

–î–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∏–º–±–∞–ª–∞–Ω—Å–∞: —Å–≤–µ—á–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º i –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π (low) –Ω–∏–∂–µ, —á–µ–º –≤—ã—Å–æ–∫–∏–π (high) —Å–≤–µ—á–∏ i+1, –∏ –ø—Ä–∏ —ç—Ç–æ–º –º–µ–∂–¥—É –Ω–∏–º–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä—ã–≤.

–û–¥–Ω–∞–∫–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ –≥—ç–ø–∞, –Ω–æ –∏ –≤ –≤–∏–¥–µ –æ—á–µ–Ω—å —Ä–µ–∑–∫–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –±–µ–∑ –æ—Ç–∫–∞—Ç–∞.
–£–ø—Ä–æ—Å—Ç–∏–º: –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≥—ç–ø—ã (—Ä–∞–∑—Ä—ã–≤—ã) –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏.

–ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è ImbalanceDeliveryModelFinder:

text
–í—Ö–æ–¥: –º–∞—Å—Å–∏–≤ ZigZagPoint[] $zigzagPoints, –º–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π (CandleDto[]) $candles

–®–∞–≥–∏:

  1. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ zigzagPoints –∏ –∏—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ø–∏–∫ -> –≤–ø–∞–¥–∏–Ω–∞ -> –ø–∏–∫ -> –≤–ø–∞–¥–∏–Ω–∞ (–¥–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è).

  2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–∫–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ (P1, T1, P2, T2) –ø—Ä–æ–≤–µ—Ä—è–µ–º:
      - –î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç P1 –∫ T1 –±—ã–ª–æ –∏–º–ø—É–ª—å—Å–Ω—ã–º (–±–æ–ª—å—à–∏–µ —Å–≤–µ—á–∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Å –≥—ç–ø–∞–º–∏ –≤–Ω–∏–∑).
      - –ú–µ–∂–¥—É P1 –∏ T1 –Ω–∞—Ö–æ–¥–∏–º –∏–º–±–∞–ª–∞–Ω—Å (–≥—ç–ø –≤–Ω–∏–∑). –ì—ç–ø –≤–Ω–∏–∑: –∫–æ–≥–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å–≤–µ—á–∏ i –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å–≤–µ—á–∏ i-1 (–Ω–æ –¥–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã –∏—â–µ–º —Ä–∞–∑—Ä—ã–≤ –≤–Ω–∏–∑: high —Å–≤–µ—á–∏ i < low —Å–≤–µ—á–∏ i-1? –ù–µ—Ç, –¥–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≥—ç–ø–∞: high —Å–≤–µ—á–∏ i < low —Å–≤–µ—á–∏ i-1, –Ω–æ —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ).

      –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ: –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –≥—ç–ø –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –∫–æ–≥–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏.

  3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–±–∞–ª–∞–Ω—Å (–≥—ç–ø) –º–µ–∂–¥—É P1 –∏ T1 –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –æ—Ç T1 –∫ P2 (—Ü–µ–Ω–∞ –ø–æ–¥–Ω—è–ª–∞—Å—å –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å–≤–µ—á–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∞–ª–∞ –≥—ç–ø, –∏–ª–∏ —Ö–æ—Ç—è –±—ã –≤ –æ–±–ª–∞—Å—Ç—å –≥—ç–ø–∞).

  4. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–∞—Ç –æ—Ç T1 –∫ P2 –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 61.8% –§–∏–±–æ–Ω–∞—á—á–∏ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è P1-T1) –∏ —á—Ç–æ –Ω–∞ P2 –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–¥–≤–µ–∂—å–∏ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã).

  5. –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ IDM —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
–û–¥–Ω–∞–∫–æ, —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏: "idm, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–Ω—è—Ç —á–µ—Ä–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –¥–æ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞" –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –º—ã –∏—â–µ–º –æ—Ç–∫–∞—Ç (P2) –∏ –ø–µ—Ä–µ–¥ –Ω–∏–º –±—ã–ª –∏–º–±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω–µ–Ω.

–†–µ–∞–ª–∏–∑–∞—Ü–∏—è:

text
–°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å ImbalanceDeliveryModelFinder:

  public function findIDM(array $zigzagPoints, array $candles): array

–û–Ω –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä (–æ–±—ä–µ–∫—Ç–æ–≤ IDMStructure), –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö IDM.

–ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞—è –∏ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è, —è –ø—Ä–µ–¥–ª–æ–∂—É —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç –≥—ç–ø—ã –∏ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—ã–ª –æ—Ç–∫–∞—Ç (–≤ —Ç–æ—á–∫–∞—Ö –∑–∏–≥–∑–∞–≥–∞).

–®–∞–≥–∏ –¥–ª—è Finder:

  1. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–≤–µ—á–∞–º –∏ –∏—â–µ–º –≥—ç–ø—ã (–Ω–∏—Å—Ö–æ–¥—è—â–∏–µ –∏ –≤–æ—Å—Ö–æ–¥—è—â–∏–µ).
  2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—ç–ø–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω (—Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –≥—ç–ø–∞).
  3. –ó–∞—Ç–µ–º —Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–æ—á–∫–∞—Ö –∑–∏–≥–∑–∞–≥–∞ –æ—Ç–∫–∞—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—ç–ø–∞.

–û–¥–Ω–∞–∫–æ, —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –º–æ–∂–µ—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∏–≥–∑–∞–≥–∞.

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏–¥—Ç–∏ –ø–æ —Ç–æ—á–∫–∞–º –∑–∏–≥–∑–∞–≥–∞ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ (–æ—Ç –ø–∏–∫–∞ –∫ –≤–ø–∞–¥–∏–Ω–µ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç) –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ —ç—Ç–æ–º –æ—Ç—Ä–µ–∑–∫–µ –≥—ç–ø—ã, –∏ –∑–∞—Ç–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç—Ä–µ–∑–∫–µ (–æ—Ç–∫–∞—Ç–µ) —ç—Ç–∏ –≥—ç–ø—ã –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è.

–ü–æ—Å–∫–æ–ª—å–∫—É –∑–∞–¥–∞—á–∞ –Ω–µ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–∞—è, —è –Ω–∞–ø–∏—à—É –∑–∞–≥–æ—Ç–æ–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.

–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω:

  - –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥—ç–ø–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ —Å–≤–µ—á–µ–π).
  - –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—ç–ø–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª –ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω (—Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –≥—ç–ø–∞) –∏ –∫–æ–≥–¥–∞.
  - –ó–∞—Ç–µ–º –ø–æ—Å–º–æ—Ç—Ä–∏–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –º–æ–º–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—ç–ø–∞ —Å –æ—Ç–∫–∞—Ç–æ–º –≤ —Ç–æ—á–∫–∞—Ö –∑–∏–≥–∑–∞–≥–∞.

–ù–æ —É—Å–ª–æ–≤–∏–µ: "idm, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–Ω—è—Ç —á–µ—Ä–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –¥–æ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞" ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∏–º–±–∞–ª–∞–Ω—Å –±—ã–ª —Å–Ω—è—Ç (–∑–∞–ø–æ–ª–Ω–µ–Ω) –∏ –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞–ª –æ—Ç–∫–∞—Ç (–∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∏–¥–∏–º –≤ –∑–∏–≥–∑–∞–≥–µ). –ò –º—ã —Ö–æ—Ç–∏–º –Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–µ –æ—Ç–∫–∞—Ç—ã, –ø–µ—Ä–µ–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞.

–¢–æ–≥–¥–∞ –º—ã –º–æ–∂–µ–º:

  1. –ù–∞–π—Ç–∏ –≤—Å–µ –≥—ç–ø—ã –∏ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.
  2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—ç–ø–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å—Ç—å –ª–∏ –≤ –∑–∏–≥–∑–∞–≥–µ —Ç–æ—á–∫–∞ –æ—Ç–∫–∞—Ç–∞ (–ø–∏–∫ –∏–ª–∏ –≤–ø–∞–¥–∏–Ω–∞) –≤–±–ª–∏–∑–∏ –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.

–û–¥–Ω–∞–∫–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å –º–Ω–æ–≥–æ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

–£—Ç–æ—á–Ω–∏–º: –º—ã –∏—â–µ–º –æ—Ç–∫–∞—Ç (—Ä–µ—Ç—Ä–∞–π—Å–º–µ–Ω—Ç) –ø–æ—Å–ª–µ –∏–º–ø—É–ª—å—Å–∞, –∏ —ç—Ç–æ—Ç –∏–º–ø—É–ª—å—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º–±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è during the retracement.

–í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –∏—Å–∫–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–º–µ–Ω–Ω–æ –≤ —Ç–æ—á–∫–∞—Ö –∑–∏–≥–∑–∞–≥–∞:

  - –ò—â–µ–º –≤ –∑–∏–≥–∑–∞–≥–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–∏–∫ (P1) -> –≤–ø–∞–¥–∏–Ω–∞ (T1) [–∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑] -> –ø–∏–∫ (P2) [–æ—Ç–∫–∞—Ç] -> –≤–ø–∞–¥–∏–Ω–∞ (T2) [–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–Ω–∏–∑]

  - –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–∏ P1->T1 –±—ã–ª –∏–º–±–∞–ª–∞–Ω—Å (–≥—ç–ø –≤–Ω–∏–∑).
  - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ T1->P2 —ç—Ç–æ—Ç –∏–º–±–∞–ª–∞–Ω—Å –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω (—Ü–µ–Ω–∞ –ø–æ–¥–Ω—è–ª–∞—Å—å –≤ –æ–±–ª–∞—Å—Ç—å –≥—ç–ø–∞).
  - –ó–∞—Ç–µ–º –Ω–∞ P2 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å).

–í–æ—Ç –ø–æ–¥ —Ç–∞–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏ –Ω–∞–ø–∏—à–µ–º.

–°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å:

  class ImbalanceDeliveryModelFinder
  {
      public function findBearishIDM(array $zigzagPoints, array $candles): array
      {
          $structures = [];

          // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç–æ—á–∫–∞–º –∑–∏–≥–∑–∞–≥–∞, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ P1 -> T1 -> P2 -> T2
          for ($i = 0; $i < count($zigzagPoints) - 3; $i++) {
              $p1 = $zigzagPoints[$i];
              $t1 = $zigzagPoints[$i+1];
              $p2 = $zigzagPoints[$i+2];
              $t2 = $zigzagPoints[$i+3];

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø–∏–∫ -> –≤–ø–∞–¥–∏–Ω–∞ -> –ø–∏–∫ -> –≤–ø–∞–¥–∏–Ω–∞
              if ($p1->getType() !== ZigZagPoint::PEAK ||
                  $t1->getType() !== ZigZagPoint::TROUGH ||
                  $p2->getType() !== ZigZagPoint::PEAK ||
                  $t2->getType() !== ZigZagPoint::TROUGH) {
                  continue;
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ (P1->T1) –∏ –∑–∞—Ç–µ–º –≤–≤–µ—Ä—Ö (T1->P2) –∏ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –≤–Ω–∏–∑ (P2->T2)
              if ($t1->getPrice() >= $p1->getPrice() ||
                  $p2->getPrice() <= $t1->getPrice() ||
                  $t2->getPrice() >= $p2->getPrice()) {
                  continue;
              }

              // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∏–º–±–∞–ª–∞–Ω—Å (–≥—ç–ø—ã) –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–∏ –æ—Ç P1 –¥–æ T1
              $p1Index = $p1->getCandleIndex();
              $t1Index = $t1->getCandleIndex();

              // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≥—ç–ø—ã –Ω–∞ —ç—Ç–æ–º –æ—Ç—Ä–µ–∑–∫–µ
              $gaps = $this->findGapsInRange($candles, $p1Index, $t1Index);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥—ç–ø –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –æ—Ç T1 –¥–æ P2
              $filledGaps = [];
              foreach ($gaps as $gap) {
                  if ($this->isGapFilled($gap, $candles, $t1Index, $p2->getCandleIndex())) {
                      $filledGaps[] = $gap;
                  }
              }

              if (count($filledGaps) > 0) {
                  // –ù–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –≥—ç–ø–∞–º–∏
                  $structures[] = new BearishIDMStructure($p1, $t1, $p2, $t2, $filledGaps);
              }
          }

          return $structures;
      }

      private function findGapsInRange(array $candles, int $startIndex, int $endIndex): array
      {
          $gaps = [];
          // –ü—Ä–æ—Ö–æ–¥–∏–º –æ—Ç startIndex –¥–æ endIndex-1
          for ($i = $startIndex; $i < $endIndex; $i++) {
              $current = $candles[$i];
              $next = $candles[$i+1];

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –≥—ç–ø: high —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ < low —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏?
              // –ù–µ—Ç, –¥–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≥—ç–ø–∞: high —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ < low —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏?
              // Actually, –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –≥—ç–ø: –∫–æ–≥–¥–∞ high —Å–≤–µ—á–∏ i+1 < low —Å–≤–µ—á–∏ i
              if ($next->getHigh() < $current->getLow()) {
                  $gaps[] = new Gap($i, $i+1, $current->getLow(), $next->getHigh(), Gap::BEARISH);
              }
          }
          return $gaps;
      }

      private function isGapFilled(Gap $gap, array $candles, int $startIndex, int $endIndex): bool
      {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç startIndex –¥–æ endIndex —Ü–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–∏–ª–∞ –≥—ç–ø
          // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—ç–ø–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –≥—ç–ø–∞ (–¥–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≥—ç–ø–∞ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ - —ç—Ç–æ low —Å–≤–µ—á–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –¥–æ –≥—ç–ø–∞)
          // –í –Ω–∏—Å—Ö–æ–¥—è—â–µ–º –≥—ç–ø–µ: gap –≤–µ—Ä—Ö = low —Å–≤–µ—á–∏ i (–±–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è —Å–≤–µ—á–∞), gap –Ω–∏–∑ = high —Å–≤–µ—á–∏ i+1
          // –ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥—ç–ø, —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ gap –≤–µ—Ä—Ö (—Ç.–µ. –≤—ã—à–µ low —Å–≤–µ—á–∏ i)

          $gapTop = $gap->getTop(); // –≠—Ç–æ low —Å–≤–µ—á–∏ i (–∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –¥–æ –≥—ç–ø–∞)

          for ($i = $startIndex; $i <= $endIndex; $i++) {
              if ($candles[$i]->getHigh() >= $gapTop) {
                  return true;
              }
          }

          return false;
      }
  }

–≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è. –ù—É–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å—ã Gap –∏ BearishIDMStructure.

–û–¥–Ω–∞–∫–æ, –∏–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ —ç—Ç–æ –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤. –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ÂèØËÉΩÈúÄË¶Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.

–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥—ç–ø–æ–≤: –∏–Ω–æ–≥–¥–∞ –≥—ç–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å–≤–µ—á–∞–º–∏, –∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π (–µ—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ).

–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —è –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è Finder –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.
–ß—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —è —Å–æ–∑–¥–∞–º –Ω–æ–≤—ã–π Finder –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ IDM (Imbalance Delivery Model), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–∫–∞—Ç–æ–º. –í–æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:

php
<?php

namespace App\Trading\Application\Analysis\Structure;

use App\Trading\Domain\Analysis\ZigZagPoint;

class ImbalanceDeliveryModelFinder
{
    public const float IMBALANCE_FILL_THRESHOLD = 0.8; // 80% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞
    public const int MIN_CANDLES_AFTER_FILL = 3; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è

    /**
     * @param ZigZagPoint[] $zigzagPoints
     * @param CandleDto[] $candles
     * @return IDMStructure[]
     */
    public function findIDM(array $zigzagPoints, array $candles): array
    {
        $structures = [];
        $imbalanceZones = $this->findImbalanceZones($candles);

        foreach ($imbalanceZones as $imbalance) {
            if ($fillPoint = $this->findImbalanceFill($imbalance, $candles, $zigzagPoints)) {
                if ($structure = $this->validateIDMStructure($imbalance, $fillPoint, $zigzagPoints, $candles)) {
                    $structures[] = $structure;
                }
            }
        }

        return $structures;
    }

    /**
     * @param CandleDto[] $candles
     * @return ImbalanceZone[]
     */
    private function findImbalanceZones(array $candles): array
    {
        $zones = [];

        for ($i = 1; $i < count($candles); $i++) {
            $current = $candles[$i];
            $previous = $candles[$i - 1];

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–±–∞–ª–∞–Ω—Å (–º–µ–¥–≤–µ–∂–∏–π)
            if ($current->getHigh() < $previous->getLow()) {
                $zones[] = new ImbalanceZone(
                    $i - 1,
                    $i,
                    $previous->getLow(),
                    $current->getHigh(),
                    ImbalanceZone::BEARISH
                );
            }
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∏–º–±–∞–ª–∞–Ω—Å (–±—ã—á–∏–π)
            elseif ($current->getLow() > $previous->getHigh()) {
                $zones[] = new ImbalanceZone(
                    $i - 1,
                    $i,
                    $current->getLow(),
                    $previous->getHigh(),
                    ImbalanceZone::BULLISH
                );
            }
        }

        return $zones;
    }

    private function findImbalanceFill(ImbalanceZone $imbalance, array $candles, array $zigzagPoints): ?ImbalanceFillPoint
    {
        $startIndex = $imbalance->getEndIndex() + 1;

        for ($i = $startIndex; $i < count($candles); $i++) {
            $candle = $candles[$i];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–∞
            $fillPercentage = $this->calculateFillPercentage($imbalance, $candle);

            if ($fillPercentage >= self::IMBALANCE_FILL_THRESHOLD) {
                $nearestZigZag = $this->findNearestZigZagPoint($i, $zigzagPoints);

                return new ImbalanceFillPoint(
                    $i,
                    $candle,
                    $fillPercentage,
                    $nearestZigZag
                );
            }
        }

        return null;
    }

    private function calculateFillPercentage(ImbalanceZone $imbalance, CandleDto $candle): float
    {
        if ($imbalance->getType() === ImbalanceZone::BEARISH) {
            // –î–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ –∏–º–±–∞–ª–∞–Ω—Å–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤—ã—à–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
            $fillLevel = min($candle->getHigh(), $imbalance->getTop());
            $imbalanceRange = $imbalance->getTop() - $imbalance->getBottom();
            $filledRange = $fillLevel - $imbalance->getBottom();

            return $imbalanceRange > 0 ? $filledRange / $imbalanceRange : 0;
        } else {
            // –î–ª—è –±—ã—á—å–µ–≥–æ –∏–º–±–∞–ª–∞–Ω—Å–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –Ω–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
            $fillLevel = max($candle->getLow(), $imbalance->getBottom());
            $imbalanceRange = $imbalance->getTop() - $imbalance->getBottom();
            $filledRange = $imbalance->getTop() - $fillLevel;

            return $imbalanceRange > 0 ? $filledRange / $imbalanceRange : 0;
        }
    }

    private function findNearestZigZagPoint(int $candleIndex, array $zigzagPoints): ?ZigZagPoint
    {
        $nearestPoint = null;
        $minDistance = PHP_INT_MAX;

        foreach ($zigzagPoints as $point) {
            $distance = abs($point->getCandleIndex() - $candleIndex);
            if ($distance < $minDistance) {
                $minDistance = $distance;
                $nearestPoint = $point;
            }
        }

        return $nearestPoint;
    }

    private function validateIDMStructure(
        ImbalanceZone $imbalance,
        ImbalanceFillPoint $fillPoint,
        array $zigzagPoints,
        array $candles
    ): ?IDMStructure {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (count($candles) - $fillPoint->getCandleIndex() < self::MIN_CANDLES_AFTER_FILL) {
            return null;
        }

        // –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        $confirmationPatterns = $this->findConfirmationPatterns(
            $fillPoint->getCandleIndex(),
            $candles,
            $imbalance->getType()
        );

        if (empty($confirmationPatterns)) {
            return null;
        }

        return new IDMStructure(
            $imbalance,
            $fillPoint,
            $confirmationPatterns,
            $this->calculateIDMStrength($imbalance, $fillPoint, $confirmationPatterns)
        );
    }

    private function findConfirmationPatterns(int $startIndex, array $candles, string $imbalanceType): array
    {
        $patterns = [];
        $lookahead = min($startIndex + 10, count($candles) - 1);

        for ($i = $startIndex + 1; $i <= $lookahead; $i++) {
            $pattern = $this->analyzeCandlePattern($candles[$i], $candles[$i - 1], $imbalanceType);
            if ($pattern) {
                $patterns[] = $pattern;
            }
        }

        return $patterns;
    }

    private function analyzeCandlePattern(CandleDto $current, CandleDto $previous, string $imbalanceType): ?CandlePattern
    {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–≤–µ–∂—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ –∏–º–±–∞–ª–∞–Ω—Å–∞
        if ($imbalanceType === ImbalanceZone::BEARISH) {
            if ($current->getClose() < $previous->getClose() &&
                $current->getVolume() > $previous->getVolume() * 1.2) {
                return new CandlePattern(
                    CandlePattern::BEARISH_ENGULFING,
                    $current->getCandleIndex()
                );
            }
        }
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±—ã—á—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±—ã—á—å–µ–≥–æ –∏–º–±–∞–ª–∞–Ω—Å–∞
        else {
            if ($current->getClose() > $previous->getClose() &&
                $current->getVolume() > $previous->getVolume() * 1.2) {
                return new CandlePattern(
                    CandlePattern::BULLISH_ENGULFING,
                    $current->getCandleIndex()
                );
            }
        }

        return null;
    }

    private function calculateIDMStrength(
        ImbalanceZone $imbalance,
        ImbalanceFillPoint $fillPoint,
        array $confirmationPatterns
    ): float {
        $strength = 0.5; // –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        $strength += $fillPoint->getFillPercentage() * 0.3;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        $strength += min(count($confirmationPatterns) * 0.1, 0.2);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–º–±–∞–ª–∞–Ω—Å–æ–≤
        $imbalanceSize = $imbalance->getTop() - $imbalance->getBottom();
        $strength += min($imbalanceSize / $imbalance->getTop() * 2, 0.2);

        return min($strength, 1.0);
    }
}
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã:

php
<?php

namespace App\Trading\Domain\Analysis\Structure;

class ImbalanceZone
{
    public const BEARISH = 'bearish';
    public const BULLISH = 'bullish';

    public function __construct(
        private int $startIndex,
        private int $endIndex,
        private float $top,
        private float $bottom,
        private string $type
    ) {}

    public function getStartIndex(): int { return $this->startIndex; }
    public function getEndIndex(): int { return $this->endIndex; }
    public function getTop(): float { return $this->top; }
    public function getBottom(): float { return $this->bottom; }
    public function getType(): string { return $this->type; }
}

class ImbalanceFillPoint
{
    public function __construct(
        private int $candleIndex,
        private CandleDto $candle,
        private float $fillPercentage,
        private ?ZigZagPoint $nearestZigZagPoint
    ) {}

    public function getCandleIndex(): int { return $this->candleIndex; }
    public function getCandle(): CandleDto { return $this->candle; }
    public function getFillPercentage(): float { return $this->fillPercentage; }
    public function getNearestZigZagPoint(): ?ZigZagPoint { return $this->nearestZigZagPoint; }
}

class CandlePattern
{
    public const BEARISH_ENGULFING = 'bearish_engulfing';
    public const BULLISH_ENGULFING = 'bullish_engulfing';
    public const PIN_BAR = 'pin_bar';
    public const INSIDE_BAR = 'inside_bar';

    public function __construct(
        private string $type,
        private int $candleIndex
    ) {}

    public function getType(): string { return $this->type; }
    public function getCandleIndex(): int { return $this->candleIndex; }
}

class IDMStructure
{
    public function __construct(
        private ImbalanceZone $imbalanceZone,
        private ImbalanceFillPoint $fillPoint,
        private array $confirmationPatterns,
        private float $strength
    ) {}

    public function getImbalanceZone(): ImbalanceZone { return $this->imbalanceZone; }
    public function getFillPoint(): ImbalanceFillPoint { return $this->fillPoint; }
    public function getConfirmationPatterns(): array { return $this->confirmationPatterns; }
    public function getStrength(): float { return $this->strength; }
}
–°–µ—Ä–≤–∏—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Finder:

php
<?php

namespace App\Trading\Application\Analysis;

use App\Trading\Application\Analysis\Structure\ImbalanceDeliveryModelFinder;
use App\Trading\Domain\Analysis\ZigZagPoint;

class ImbalanceAnalysisService
{
    public function __construct(
        private ImbalanceDeliveryModelFinder $finder,
        private ZigZagService $zigZagService
    ) {}

    /**
     * @param CandleDto[] $candles
     * @return IDMStructure[]
     */
    public function findIDMStructures(array $candles): array
    {
        $zigzagPoints = $this->zigZagService->findZigZagPoints($candles);
        return $this->finder->findIDM($zigzagPoints, $candles);
    }

    /**
     * @param CandleDto[] $candles
     * @return IDMStructure[]
     */
    public function findBearishIDMAfterFill(array $candles): array
    {
        $structures = $this->findIDMStructures($candles);

        return array_filter($structures, function($structure) {
            return $structure->getImbalanceZone()->getType() === ImbalanceZone::BEARISH &&
                   $structure->getStrength() > 0.7;
        });
    }
}
–≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–º–±–∞–ª–∞–Ω—Å–æ–≤: –ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–Ω–æ–≤—ã–µ —Ä–∞–∑—Ä—ã–≤—ã –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–º–±–∞–ª–∞–Ω—Å

–ü–æ–∏—Å–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: –ò—â–µ—Ç —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞

–û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–ª—É IDM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç Finder –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –≤–∞—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π ZigZag –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Smart Money.

diff --git a/src/Infrastructure/ByBit/Service/CacheDecorated/ByBitLinearPositionCacheDecoratedService.php b/src/Infrastructure/ByBit/Service/CacheDecorated/ByBitLinearPositionCacheDecoratedService.php
index d808508..118b3e5 100644
--- a/src/Infrastructure/ByBit/Service/CacheDecorated/ByBitLinearPositionCacheDecoratedService.php
+++ b/src/Infrastructure/ByBit/Service/CacheDecorated/ByBitLinearPositionCacheDecoratedService.php
@@ -18,27 +18,30 @@ use App\Infrastructure\ByBit\Service\Exception\Trade\MaxActiveCondOrdersQntReach
 use App\Infrastructure\ByBit\Service\Exception\Trade\TickerOverConditionalOrderTriggerPrice;
 use App\Infrastructure\ByBit\Service\Exception\UnexpectedApiErrorException;
 use App\Infrastructure\Cache\PositionsCache;
+use App\Worker\AppContext;
 use DateInterval;
 use Psr\EventDispatcher\EventDispatcherInterface;
 use Symfony\Contracts\Cache\CacheInterface;
 use Symfony\Contracts\Cache\ItemInterface;
 
 use function sprintf;
+use function var_dump;
 
-final readonly class ByBitLinearPositionCacheDecoratedService implements PositionServiceInterface, PositionsCache
+final class ByBitLinearPositionCacheDecoratedService implements PositionServiceInterface, PositionsCache
 {
     private const ASSET_CATEGORY = AssetCategory::linear;
 
-    /** @todo | inject into service? */
-    private const POSITION_TTL = '6 seconds';
+    private const POSITION_CACHE_TTL = 6;
+
+    private int $positionCacheTtl = self::POSITION_CACHE_TTL;
 
     /**
      * @param ByBitLinearPositionService $positionService
      */
     public function __construct(
-        private PositionServiceInterface $positionService,
-        private EventDispatcherInterface $events,
-        private CacheInterface $cache,
+        private readonly PositionServiceInterface $positionService,
+        private readonly EventDispatcherInterface $events,
+        private readonly CacheInterface $cache,
     ) {
     }
 
@@ -50,11 +53,12 @@ final readonly class ByBitLinearPositionCacheDecoratedService implements Positio
         $key = self::positionCacheKey($symbol, $side);
 
         return $this->cache->get($key, function (ItemInterface $item) use ($symbol, $side) {
-            $item->expiresAfter(DateInterval::createFromDateString(self::POSITION_TTL));
+            $item->expiresAfter($this->positionCacheTtl);
 
             if ($position = $this->positionService->getPosition($symbol, $side)) {
                 $this->events->dispatch(new PositionUpdated($position));
             }
+            var_dump('upd by ' . AppContext::runningWorker()->value);
 
             return $position;
         });
@@ -65,7 +69,8 @@ final readonly class ByBitLinearPositionCacheDecoratedService implements Positio
         $key = sprintf('api_%s_%s_positions_data', self::ASSET_CATEGORY->value, $symbol->value);
 
         return $this->cache->get($key, function (ItemInterface $item) use ($symbol) {
-            $item->expiresAfter(DateInterval::createFromDateString(self::POSITION_TTL));
+            $item->expiresAfter($this->positionCacheTtl);
+            var_dump('upd2');
 
             return $this->positionService->getPositions($symbol);
         });

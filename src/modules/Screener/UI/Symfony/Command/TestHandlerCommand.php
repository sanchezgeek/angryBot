<?php

namespace App\Screener\UI\Symfony\Command;

use App\Bot\Application\Service\Exchange\ExchangeServiceInterface;
use App\Bot\Domain\Ticker;
use App\Command\AbstractCommand;
use App\Command\Mixin\PositionAwareCommand;
use App\Command\Mixin\SymbolAwareCommand;
use App\Command\PositionDependentCommand;
use App\Command\SymbolDependentCommand;
use App\Domain\Candle\Enum\CandleIntervalEnum;
use App\Helper\OutputHelper;
use App\Screener\Application\UseCase\CalculateSignificantPriceChange\CalculateSignificantPriceChangeEntry;
use App\Screener\Application\UseCase\CalculateSignificantPriceChange\CalculateSignificantPriceChangeHandler;
use App\Settings\Application\Service\AppSettingsService;
use App\Settings\Application\Service\SettingAccessor;
use App\Trading\Application\Settings\OpenPositionSettings;
use App\Trading\Application\UseCase\OpenPosition\Exception\AutoReopenPositionDenied;
use App\Trading\Application\UseCase\OpenPosition\Exception\DefaultGridDefinitionNotFound;
use App\Trading\Application\UseCase\OpenPosition\OpenPositionEntryDto;
use App\Trading\Application\UseCase\OpenPosition\OpenPositionHandler;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionBuyGridsDefinitions;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionStopsGridsDefinitions;
use App\Trading\Domain\Grid\Definition\OrdersGridDefinitionCollection;
use App\Trading\Domain\Symbol\SymbolInterface;
use InvalidArgumentException;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\DependencyInjection\Attribute\AutoconfigureTag;
use Throwable;

#[AsCommand(name: 'screener:test')]
#[AutoconfigureTag(name: 'command.symbol_dependent')]
class TestHandlerCommand extends AbstractCommand implements SymbolDependentCommand
{
    use SymbolAwareCommand;

    private SymbolInterface $symbol;
    private Ticker $ticker;

    protected function configure(): void
    {
        $this
            ->configureSymbolArgs()
        ;
    }

    protected function initialize(
        InputInterface $input,
        OutputInterface $output
    ): void {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->symbol = $this->getSymbol();
        $this->ticker = $this->exchangeService->ticker($this->symbol);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $res = $this->handler->handle(
            new CalculateSignificantPriceChangeEntry(
                $this->symbol,
                CandleIntervalEnum::D1,
                5
            )
        );


        var_dump($res);die;

        return Command::SUCCESS;
    }

    public function __construct(
        private readonly CalculateSignificantPriceChangeHandler $handler,

        private readonly AppSettingsService $settingsService,
        private readonly OpenPositionHandler $openPositionHandler,
        private readonly OpenPositionBuyGridsDefinitions $buyOrdersGridDefinitionFinder,
        private readonly OpenPositionStopsGridsDefinitions $stopsGridDefinitionFinder,
        private readonly ExchangeServiceInterface $exchangeService,
        ?string $name = null,
    ) {
        parent::__construct($name);
    }
}

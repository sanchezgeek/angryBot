<?php

namespace App\Screener\UI\Symfony\Command;

use App\Bot\Domain\Ticker;
use App\Command\AbstractCommand;
use App\Command\Mixin\SymbolAwareCommand;
use App\Command\SymbolDependentCommand;
use App\Domain\Candle\Enum\CandleIntervalEnum;
use App\Domain\Coin\Coin;
use App\Domain\Value\Percent\Percent;
use App\Infrastructure\ByBit\Service\ByBitLinearExchangeService;
use App\Settings\Application\Service\AppSettingsService;
use App\TechnicalAnalysis\Application\UseCase\FindAveragePriceChange\FindAveragePriceChangeEntry;
use App\TechnicalAnalysis\Application\UseCase\FindAveragePriceChange\FindAveragePriceChangeHandler;
use App\Trading\Application\UseCase\OpenPosition\OpenPositionHandler;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionBuyGridsDefinitions;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionStopsGridsDefinitions;
use App\Trading\Domain\Symbol\SymbolInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(name: 'screener:test')]
class TestHandlerCommand extends AbstractCommand implements SymbolDependentCommand
{
    use SymbolAwareCommand;

    private SymbolInterface $symbol;
    private Ticker $ticker;

    protected function configure(): void
    {
        $this
            ->configureSymbolArgs()
        ;
    }

    protected function initialize(
        InputInterface $input,
        OutputInterface $output
    ): void {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->symbol = $this->getSymbol();
        $this->ticker = $this->exchangeService->ticker($this->symbol);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $tickers = $this->exchangeService->getAllTickers(Coin::USDT, static fn (string $symbolName) => !str_contains($symbolName, '1000'));

        usort($tickers, static fn (Ticker $a, Ticker $b) => $b->indexPrice <=> $a->indexPrice);

        foreach ($tickers as $ticker) {
            $res = $this->handler->handle(
                new FindAveragePriceChangeEntry(
                    $ticker->symbol,
                    CandleIntervalEnum::D1,
                    7
                )
            );

            // x1.5 - significant one day
            // /3.5 - /3 - first stops grid

            $res4 = $res / 4;
            $res3 = $res / 3;

            $this->io->writeln(
                sprintf(
                    "%s: %s (%s of current price)\n          % 10s=%s (%s of current price)\n% 10s=%s (%s of current price)\n",
                    $ticker->symbol->name(),
                    $res,
                    Percent::fromPart($res / $ticker->indexPrice->value()),
                    '/4',
                    $res4,
                    Percent::fromPart($res4 / $ticker->indexPrice->value()),
                    '/3',
                    $res3,
                    Percent::fromPart($res3 / $ticker->indexPrice->value()),
                )
            );
        }

        return Command::SUCCESS;
    }

    public function __construct(
        private readonly FindAveragePriceChangeHandler $handler,

        private readonly AppSettingsService $settingsService,
        private readonly OpenPositionHandler $openPositionHandler,
        private readonly OpenPositionBuyGridsDefinitions $buyOrdersGridDefinitionFinder,
        private readonly OpenPositionStopsGridsDefinitions $stopsGridDefinitionFinder,
        private readonly ByBitLinearExchangeService $exchangeService,
        ?string $name = null,
    ) {
        parent::__construct($name);
    }
}

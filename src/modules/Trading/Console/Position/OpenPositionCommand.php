<?php

namespace App\Trading\Console\Position;

use App\Bot\Application\Service\Exchange\ExchangeServiceInterface;
use App\Bot\Application\Service\Exchange\Trade\CannotAffordOrderCostException;
use App\Bot\Domain\Ticker;
use App\Command\AbstractCommand;
use App\Command\Mixin\PositionAwareCommand;
use App\Command\Position\OpenedPositions\Cache\OpenedPositionsCache;
use App\Command\PositionDependentCommand;
use App\Domain\Trading\Enum\RiskLevel;
use App\Helper\OutputHelper;
use App\Infrastructure\ByBit\Service\Market\ByBitLinearMarketService;
use App\Settings\Application\Service\AppSettingsService;
use App\Settings\Application\Service\SettingAccessor;
use App\Trading\Application\Settings\OpenPositionSettings;
use App\Trading\Application\UseCase\OpenPosition\Exception\AutoReopenPositionDenied;
use App\Trading\Application\UseCase\OpenPosition\Exception\DefaultGridDefinitionNotFound;
use App\Trading\Application\UseCase\OpenPosition\OpenPositionEntryDto;
use App\Trading\Application\UseCase\OpenPosition\OpenPositionHandler;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionBuyGridsDefinitions;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionStopsGridsDefinitions;
use App\Trading\Domain\Grid\Definition\OrdersGridDefinitionCollection;
use App\Trading\Domain\Symbol\SymbolInterface;
use Exception;
use InvalidArgumentException;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Throwable;

#[AsCommand(name: 'p:open')]
class OpenPositionCommand extends AbstractCommand implements PositionDependentCommand
{
    use PositionAwareCommand;

    public const string DEBUG_OPTION = 'deb';

    public const string REOPEN_OPTION = 'reopen';
    public const string PERCENT_OF_DEPOSIT_TO_RISK_OPTION = 'depositPercentToRisk';

    public const string REMOVE_EXISTED_STOPS_OPTION = 'remove-existed-stops';
    public const string WITHOUT_STOPS_OPTION = 'wS';
    public const string STOPS_GRID_DEFINITION = 'stops-grid';
    public const string REMEMBER_STOPS_GRID_DEFINITION = 'remember-stops-grid';
    public const string STOPS_GRID_DEFINITION_DEFAULT = 'default';

    public const string SPLIT_BUY_WITH_BUY_ORDERS = 'split-buy';
    public const string BUY_ORDERS_GRID_DEFINITION = 'buy-grid';
    public const string REMEMBER_BUY_GRID_DEFINITION = 'remember-buy-grid';
    public const string BUY_ORDERS_GRID_DEFINITION_DEFAULT = 'default';

    public const string TRADING_STYLE = 'style';

    private SymbolInterface $symbol;
    private Ticker $ticker;
    private RiskLevel $riskLevel;

    protected function configure(): void
    {
        $this
            ->configurePositionArgs()
            ->addOption(self::DEBUG_OPTION, null, InputOption::VALUE_NEGATABLE, 'Debug?')

            ->addOption(self::PERCENT_OF_DEPOSIT_TO_RISK_OPTION, 'p', InputOption::VALUE_REQUIRED, 'Deposit percent to risk (%)')
            ->addOption(self::REOPEN_OPTION, null, InputOption::VALUE_NEGATABLE, 'Reopen position?')

            ->addOption(self::WITHOUT_STOPS_OPTION, null, InputOption::VALUE_NEGATABLE, 'Without stops?', false)
            ->addOption(self::STOPS_GRID_DEFINITION, null, InputOption::VALUE_REQUIRED, 'Stop grids definition', self::STOPS_GRID_DEFINITION_DEFAULT)
            ->addOption(self::REMEMBER_STOPS_GRID_DEFINITION, null, InputOption::VALUE_OPTIONAL, 'Stop grids definition (with remember)')
            ->addOption(self::REMOVE_EXISTED_STOPS_OPTION, null, InputOption::VALUE_NEGATABLE, 'Remove existed stops?', false)

            ->addOption(self::SPLIT_BUY_WITH_BUY_ORDERS, null, InputOption::VALUE_NEGATABLE, 'Buy some part with delayed BuyOrders?')
            ->addOption(self::BUY_ORDERS_GRID_DEFINITION, null, InputOption::VALUE_REQUIRED, 'BuyOrders grid definition', self::BUY_ORDERS_GRID_DEFINITION_DEFAULT)
            ->addOption(self::REMEMBER_BUY_GRID_DEFINITION, null, InputOption::VALUE_OPTIONAL, 'BuyOrders grid definition (with remember)')

            ->addArgument(self::TRADING_STYLE, InputArgument::OPTIONAL, 'Trading style', RiskLevel::Conservative->value)
//            ->addOption(self::TRIGGER_DELTA_OPTION, 'd', InputOption::VALUE_OPTIONAL, 'Stops trigger delta')
        ;
    }

    protected function initialize(
        InputInterface $input,
        OutputInterface $output
    ): void {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->symbol = $this->getSymbol();
        $this->ticker = $this->exchangeService->ticker($this->symbol);
        $this->riskLevel = RiskLevel::from($this->paramFetcher->getStringArgument(self::TRADING_STYLE));
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $positionSide = $this->getPositionSide();

        try {$buyOrdersGridsDef = $this->getBuyOrdersGridDefinition();} catch (DefaultGridDefinitionNotFound $e) {
            $this->io->error(sprintf("%s\nYou need to specify it manually with `%s` or `%s` options", $e->getMessage(), self::BUY_ORDERS_GRID_DEFINITION, self::REMEMBER_BUY_GRID_DEFINITION));
            return Command::FAILURE;
        }

        try {$stopsGridsDef = $this->getStopsGridDefinition();} catch (DefaultGridDefinitionNotFound $e) {
            $this->io->error(sprintf("%s\nYou need to specify it manually with `%s` or `%s` options", $e->getMessage(), self::STOPS_GRID_DEFINITION, self::REMEMBER_STOPS_GRID_DEFINITION));
            return Command::FAILURE;
        }

        if (
            $stopsGridsDef?->isFoundAutomaticallyFromTa()
            && !$this->io->confirm(sprintf('Stops grid definition found automatically from TA: `%s`. Confirm?', $stopsGridsDef))
        ) {
            return Command::FAILURE;
        }

        $inputDto = new OpenPositionEntryDto(
            symbol: $this->symbol,
            positionSide: $positionSide,
            percentOfDepositToRisk: $this->paramFetcher->requiredPercentOption(self::PERCENT_OF_DEPOSIT_TO_RISK_OPTION, true),
            withStops: !$this->paramFetcher->getBoolOption(self::WITHOUT_STOPS_OPTION),
            closeAndReopenCurrentPosition: $this->paramFetcher->getBoolOption(self::REOPEN_OPTION),
            removeExistedStops: $this->paramFetcher->getBoolOption(self::REMOVE_EXISTED_STOPS_OPTION),
            dryRun: $this->paramFetcher->getBoolOption(self::DEBUG_OPTION),
            outputEnabled: true,
            buyGridsDefinition: $buyOrdersGridsDef,
            stopsGridsDefinition: $stopsGridsDef,
        );

        try {
            $this->openPositionHandler->handle($inputDto);
        } catch (AutoReopenPositionDenied $e) {
            $this->io->warning(
                sprintf("%s\nClose position manually first:\n   `./bin/console order:place --symbol=%s` -kclose %s 100%%", $e->getMessage(), $symbol->name(), $positionSide->value)
            );
            return Command::FAILURE;
        } catch (CannotAffordOrderCostException $e) {
            OutputHelper::print('trying to increase leverage');
            $maxLeverage = $this->marketService->getInstrumentInfo($this->symbol->name())->maxLeverage;

            try {
                $this->positionService->setLeverage($this->symbol, $maxLeverage, $maxLeverage);
            } catch (Throwable) {}

            $this->openPositionHandler->handle($inputDto);
        } catch (Throwable $e) {
            OutputHelper::print($e->getMessage());
            return Command::FAILURE;
        }

        $this->cache->addSymbolToWatch($this->symbol);

        return Command::SUCCESS;
    }

    /**
     * @throws DefaultGridDefinitionNotFound
     */
    private function getBuyOrdersGridDefinition(): ?OrdersGridDefinitionCollection
    {
        if (!$this->paramFetcher->getBoolOption(self::SPLIT_BUY_WITH_BUY_ORDERS)) {
            return null;
        }

        $symbol = $this->getSymbol();
        $positionSide = $this->getPositionSide();
        $priceToRelate = $this->ticker->indexPrice;

        if ($rememberDefinition = $this->paramFetcher->getStringOption(self::REMEMBER_BUY_GRID_DEFINITION, false)) {
            $defParsed = OrdersGridDefinitionCollection::create($rememberDefinition, $priceToRelate, $positionSide, $symbol);

            $choose = $this->io->ask('Remember `buy-grid` only for `symbol` (-> "symbol") or also use `side` (-> "both")? Default: symbol');
            $settingsAccessor = match ($choose) {
                null, 'symbol' => SettingAccessor::exact(OpenPositionSettings::SplitToBuyOrders_DefaultGridsDefinition, $symbol),
                'both' => SettingAccessor::exact(OpenPositionSettings::SplitToBuyOrders_DefaultGridsDefinition, $symbol, $positionSide),
                default => throw new InvalidArgumentException('Select one of "symbol" or "both'),
            };

            $this->settingsService->set($settingsAccessor, $rememberDefinition);

            return $defParsed;
        }

        $definition = $this->paramFetcher->getStringOption(self::BUY_ORDERS_GRID_DEFINITION);
        if ($definition !== self::BUY_ORDERS_GRID_DEFINITION_DEFAULT) {
            return OrdersGridDefinitionCollection::create($definition, $priceToRelate, $positionSide, $symbol);
        }

        return $this->buyOrdersGridDefinitionFinder->create($symbol, $positionSide, $priceToRelate);
    }

    /**
     * @throws DefaultGridDefinitionNotFound
     */
    private function getStopsGridDefinition(): ?OrdersGridDefinitionCollection
    {
        if ($this->paramFetcher->getBoolOption(self::WITHOUT_STOPS_OPTION)) {
            return null;
        }

        $symbol = $this->getSymbol();
        $positionSide = $this->getPositionSide();
        $priceToRelate = $this->ticker->indexPrice;

        if ($rememberDefinition = $this->paramFetcher->getStringOption(self::REMEMBER_STOPS_GRID_DEFINITION, false)) {
            $defParsed = OrdersGridDefinitionCollection::create($rememberDefinition, $priceToRelate, $positionSide, $symbol);

            $choose = $this->io->ask('Remember `stops-grid` only for `symbol` (-> "symbol") or also use `side` (-> "both")? Default: symbol');
            $settingsAccessor = match ($choose) {
                null, 'symbol' => SettingAccessor::exact(OpenPositionSettings::Stops_DefaultGridDefinition, $symbol),
                'both' => SettingAccessor::exact(OpenPositionSettings::Stops_DefaultGridDefinition, $symbol, $positionSide),
                default => throw new InvalidArgumentException('Select one of "symbol" or "both'),
            };

            $this->settingsService->set($settingsAccessor, $rememberDefinition);

            return $defParsed;
        }

        $definition = $this->paramFetcher->getStringOption(self::STOPS_GRID_DEFINITION);
        if ($definition !== self::STOPS_GRID_DEFINITION_DEFAULT) {
            return OrdersGridDefinitionCollection::create($definition, $priceToRelate, $positionSide, $symbol);
        }

        return $this->stopsGridDefinitionFinder->create($symbol, $positionSide, $priceToRelate, $this->riskLevel);
    }

    public function __construct(
        private readonly OpenedPositionsCache $cache,
        private readonly AppSettingsService $settingsService,
        private readonly OpenPositionHandler $openPositionHandler,
        private readonly OpenPositionBuyGridsDefinitions $buyOrdersGridDefinitionFinder,
        private readonly OpenPositionStopsGridsDefinitions $stopsGridDefinitionFinder,
        private readonly ExchangeServiceInterface $exchangeService,
        private readonly ByBitLinearMarketService $marketService,
        ?string $name = null,
    ) {
        parent::__construct($name);
    }
}

<?php

namespace App\Trading\Console\LockInProfit;

use App\Bot\Domain\Entity\Stop;
use App\Bot\Domain\Repository\StopRepositoryInterface;
use App\Bot\Domain\Ticker;
use App\Command\AbstractCommand;
use App\Command\Mixin\PositionAwareCommand;
use App\Command\PositionDependentCommand;
use App\Domain\Trading\Enum\TradingStyle;
use App\Trading\Domain\Symbol\SymbolInterface;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(name: 'trading:lock-in-profit:remove')]
class RemoveLockInProfitStopsCommand extends AbstractCommand implements PositionDependentCommand
{
    use PositionAwareCommand;

    private ?SymbolInterface $symbol;
    private Ticker $ticker;
    private TradingStyle $tradingStyle;

    protected function configure(): void
    {
        $this
            ->configurePositionArgs()
        ;
    }

    protected function initialize(
        InputInterface $input,
        OutputInterface $output
    ): void {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->symbol = $this->getSymbol(false);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $positionSide = $this->getPositionSide();

        if ($this->symbol) {
            $stops = $this->stopRepository->getCreatedAsLockInProfit($this->symbol, $positionSide);
        } else {
            $stops = $this->stopRepository->getCreatedAsLockInProfit();
        }

        /** @var Stop[] $stops */
        $this->entityManager->wrapInTransaction(function () use ($stops, $positionSide) {
            foreach ($stops as $stop) {
                if ($stop->getPositionSide() !== $positionSide) {
                    continue;
                }

                $this->entityManager->remove($stop);
            }
        });

        return Command::SUCCESS;
    }

    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        private readonly StopRepositoryInterface $stopRepository,
        ?string $name = null,
    ) {
        parent::__construct($name);
    }
}

<?php

namespace App\Trading\Console\LockInProfit;

use App\Bot\Domain\Factory\PositionFactory;
use App\Bot\Domain\Ticker;
use App\Bot\Domain\ValueObject\SymbolEnum;
use App\Command\AbstractCommand;
use App\Command\Mixin\PositionAwareCommand;
use App\Command\PositionDependentCommand;
use App\Domain\Position\ValueObject\Side;
use App\Domain\Trading\Enum\RiskLevel;
use App\Trading\Application\LockInProfit\Factory\LockInProfitStrategiesDtoFactory;
use App\Trading\Contract\LockInProfit\LockInProfitEntry;
use App\Trading\Contract\LockInProfit\LockInProfitHandlerInterface;
use App\Trading\Domain\Symbol\SymbolInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(name: 'trading:lock-in-profit')]
class LockInProfitCommand extends AbstractCommand implements PositionDependentCommand
{
    use PositionAwareCommand;

    private SymbolInterface $symbol;
    private Ticker $ticker;
    private RiskLevel $riskLevel;

    protected function configure(): void
    {
        $this
            ->configurePositionArgs()
        ;
    }

    protected function initialize(
        InputInterface $input,
        OutputInterface $output
    ): void {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->symbol = $this->getSymbol();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $entry = new LockInProfitEntry(
            $this->getPosition(),
            $this->stepsFactory->threeStopStepsLock()
        );

        $this->handler->handle($entry);

        return Command::SUCCESS;
    }

    public function __construct(
        private readonly LockInProfitHandlerInterface $handler,
        private readonly LockInProfitStrategiesDtoFactory $stepsFactory,
        ?string $name = null,
    ) {
        parent::__construct($name);
    }
}

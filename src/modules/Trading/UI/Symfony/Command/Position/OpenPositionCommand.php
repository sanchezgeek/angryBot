<?php

namespace App\Trading\UI\Symfony\Command\Position;

use App\Bot\Application\Service\Exchange\ExchangeServiceInterface;
use App\Bot\Domain\Ticker;
use App\Bot\Domain\ValueObject\Symbol;
use App\Command\AbstractCommand;
use App\Command\Mixin\PositionAwareCommand;
use App\Helper\OutputHelper;
use App\Trading\Application\UseCase\OpenPosition\Exception\AutoReopenPositionDenied;
use App\Trading\Application\UseCase\OpenPosition\Exception\DefaultGridDefinitionNotFound;
use App\Trading\Application\UseCase\OpenPosition\OpenPositionEntryDto;
use App\Trading\Application\UseCase\OpenPosition\OpenPositionHandler;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionBuyGridsDefinitions;
use App\Trading\Application\UseCase\OpenPosition\OrdersGrids\OpenPositionStopsGridsDefinitions;
use App\Trading\Domain\Grid\Definition\OrdersGridDefinitionCollection;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Throwable;

#[AsCommand(name: 'p:open')]
class OpenPositionCommand extends AbstractCommand
{
    use PositionAwareCommand;

    public const string DEBUG_OPTION = 'deb';

    public const string REOPEN_OPTION = 'reopen';
    public const string PERCENT_OF_DEPOSIT_TO_RISK_OPTION = 'depositPercentToRisk';

    public const string WITH_STOPS_OPTION = 'with-stops';
    public const string STOPS_GRID_DEFINITION = 'stops-grid';
    public const string STOPS_GRID_DEFINITION_DEFAULT = 'default';

    public const string SPLIT_BUY_WITH_BUY_ORDERS = 'split-buy';
    public const string BUY_ORDERS_GRID_DEFINITION = 'buy-grid';
    public const string BUY_ORDERS_GRID_DEFINITION_DEFAULT = 'default';

    private Symbol $symbol;
    private Ticker $ticker;

    protected function configure(): void
    {
        $this
            ->configurePositionArgs()
            ->addOption(self::DEBUG_OPTION, null, InputOption::VALUE_NEGATABLE, 'Debug?')

            ->addOption(self::PERCENT_OF_DEPOSIT_TO_RISK_OPTION, 'p', InputOption::VALUE_REQUIRED, 'Deposit percent to risk (%)')
            ->addOption(self::REOPEN_OPTION, null, InputOption::VALUE_NEGATABLE, 'Reopen position?')

            ->addOption(self::WITH_STOPS_OPTION, null, InputOption::VALUE_OPTIONAL, 'With stops?', true)
            ->addOption(self::STOPS_GRID_DEFINITION, null, InputOption::VALUE_REQUIRED, 'Stop grids definition', self::STOPS_GRID_DEFINITION_DEFAULT)

            ->addOption(self::SPLIT_BUY_WITH_BUY_ORDERS, null, InputOption::VALUE_NEGATABLE, 'Buy some part with delayed BuyOrders?')
            ->addOption(self::BUY_ORDERS_GRID_DEFINITION, null, InputOption::VALUE_REQUIRED, 'BuyOrders grid definition', self::BUY_ORDERS_GRID_DEFINITION_DEFAULT)
//            ->addOption(self::TRIGGER_DELTA_OPTION, 'd', InputOption::VALUE_OPTIONAL, 'Stops trigger delta')
        ;
    }

    protected function initialize(
        InputInterface $input,
        OutputInterface $output
    ): void {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->symbol = $this->getSymbol();
        $this->ticker = $this->exchangeService->ticker($this->symbol);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $positionSide = $this->getPositionSide();

        try {$buyOrdersGridsDef = $this->getBuyOrdersGridDefinition();} catch (DefaultGridDefinitionNotFound $e) {
            $this->io->error(sprintf("%s\nYou need to specify it manually with `%s` option", $e->getMessage(), self::BUY_ORDERS_GRID_DEFINITION));
            return Command::FAILURE;
        }

        try {$stopsGridsDef = $this->getStopsGridDefinition();} catch (DefaultGridDefinitionNotFound $e) {
            $this->io->error(sprintf("%s\nYou need to specify it manually with `%s` option", $e->getMessage(), self::STOPS_GRID_DEFINITION));
            return Command::FAILURE;
        }

        $inputDto = new OpenPositionEntryDto(
            symbol: $this->symbol,
            positionSide: $positionSide,
            percentOfDepositToRisk: $this->paramFetcher->requiredPercentOption(self::PERCENT_OF_DEPOSIT_TO_RISK_OPTION, true),
            withStops: $this->paramFetcher->getBoolOption(self::WITH_STOPS_OPTION),
            closeAndReopenCurrentPosition: $this->paramFetcher->getBoolOption(self::REOPEN_OPTION),
            dryRun: $this->paramFetcher->getBoolOption(self::DEBUG_OPTION),
            outputEnabled: true,
            buyGridsDefinition: $buyOrdersGridsDef,
            stopsGridsDefinition: $stopsGridsDef,
        );

        try {
            $this->openPositionHandler->handle($inputDto);
        } catch (AutoReopenPositionDenied $e) {
            $this->io->warning(
                sprintf("%s\nClose position manually first:\n   `./bin/console order:place --symbol=%s` -kclose %s 100%%", $e->getMessage(), $symbol->value, $positionSide->value)
            );
            return Command::FAILURE;
        } catch (Throwable $e) {
            OutputHelper::print($e->getMessage());
            return Command::FAILURE;
        }

        return Command::SUCCESS;
    }

    /**
     * @throws DefaultGridDefinitionNotFound
     */
    private function getBuyOrdersGridDefinition(): ?OrdersGridDefinitionCollection
    {
        if (!$this->paramFetcher->getBoolOption(self::SPLIT_BUY_WITH_BUY_ORDERS)) {
            return null;
        }

        $symbol = $this->getSymbol();
        $positionSide = $this->getPositionSide();
        $priceToRelate = $this->ticker->indexPrice;

        $definition = $this->paramFetcher->getStringOption(self::BUY_ORDERS_GRID_DEFINITION);
        if ($definition !== self::BUY_ORDERS_GRID_DEFINITION_DEFAULT) {
            return OrdersGridDefinitionCollection::create($definition, $priceToRelate, $positionSide, $symbol);
        }

        return $this->buyOrdersGridDefinitionFinder->create($symbol, $positionSide, $priceToRelate);
    }

    /**
     * @throws DefaultGridDefinitionNotFound
     */
    private function getStopsGridDefinition(): ?OrdersGridDefinitionCollection
    {
        if (!$this->paramFetcher->getBoolOption(self::WITH_STOPS_OPTION)) {
            return null;
        }

        $symbol = $this->getSymbol();
        $positionSide = $this->getPositionSide();
        $priceToRelate = $this->ticker->indexPrice;

        $definition = $this->paramFetcher->getStringOption(self::STOPS_GRID_DEFINITION);
        if ($definition !== self::STOPS_GRID_DEFINITION_DEFAULT) {
            return OrdersGridDefinitionCollection::create($definition, $priceToRelate, $positionSide, $symbol);
        }

        return $this->stopsGridDefinitionFinder->create($symbol, $positionSide, $priceToRelate);
    }

    public function __construct(
        private readonly OpenPositionHandler $openPositionHandler,
        private readonly OpenPositionBuyGridsDefinitions $buyOrdersGridDefinitionFinder,
        private readonly OpenPositionStopsGridsDefinitions $stopsGridDefinitionFinder,
        private readonly ExchangeServiceInterface $exchangeService,
        ?string $name = null,
    ) {
        parent::__construct($name);
    }
}
